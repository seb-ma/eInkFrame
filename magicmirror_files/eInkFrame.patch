diff --git a/MMM-Nantes-TAN.js b/MMM-Nantes-TAN.js
index 4e168e3..bd0b85a 100644
--- a/MMM-Nantes-TAN.js
+++ b/MMM-Nantes-TAN.js
@@ -20,7 +20,7 @@ Module.register("MMM-Nantes-TAN",{
     showSecondsToNextUpdate: true,  // display a countdown to the next update pull (should I wait for a refresh before going ?)
     showLastUpdateTime: false,  //display the time when the last pulled occured (taste & color...)
     debug: false, //console.log more things to help debugging
-    tanURL: 'http://open.tan.fr/ewp/',
+    tanURL: 'https://open.tan.fr/ewp/',
     colorBlue: "rgb(0,121,188)",
     colorGreen: "rgb(0, 118,125)",
     colorYellow: "rgb(253,197,16)",
@@ -44,13 +44,16 @@ Module.register("MMM-Nantes-TAN",{
     this.busSchedules = {};
     this.arretData = {};
     this.busLastUpdate = {};
+    this.infoTraffic = [];
     this.loaded = false;
     this.updateTimer = null;
     var self = this;
+    if (this.config.showSecondsToNextUpdate) {
     setInterval(function () {
       self.caller = 'updateInterval';
       self.updateDom();
     }, 1000);
+    }
   },
 
   getHeader: function () {
@@ -139,6 +142,13 @@ getDom: function() {
       wrapper.className = "nantestan";
     }
     
+	var alerts = document.createElement("div");
+	for (var infoIndex = 0; infoIndex < this.infoTraffic.length; infoIndex++) {
+		alerts.className = "alertstan";
+		alerts.innerHTML = this.infoTraffic[infoIndex];
+	}
+    wrapper.appendChild(alerts);
+
     var table = document.createElement("table");
 
     var stopIndex;
@@ -153,6 +163,7 @@ getDom: function() {
         var comingBuses = this.busSchedules[stopIndex];
         var comingBusLastUpdate = this.busLastUpdate[stopIndex];
         var arretData = this.arretData[stopIndex];
+        if (arretData === undefined) { continue; }
         row = document.createElement("tr");
         this.setColor(row,stop.color);
         var symbol = document.createElement("span");
@@ -184,8 +195,7 @@ getDom: function() {
         for (var comingIndex = 0; (comingIndex < this.config.maximumEntries) && (comingIndex < comingBuses.length); comingIndex++) {
             comingBus = comingBuses[comingIndex];
             var time = this.timeCleaning(comingBus.temps);
-            if (comingIndex == 0) {
-                
+            if (comingIndex == 0 || time === "") {
                 depCell.innerHTML=time;
             } else {
                 depCell.innerHTML=depCell.innerHTML+" / " + time;
@@ -206,12 +216,15 @@ getDom: function() {
         this.busSchedules[payload.id] = payload.schedules;
         this.busLastUpdate[payload.id] = payload.lastUpdate;
         this.arretData[payload.id] = payload.arret;
-        this.loaded = true;
-        this.updateDom();
+        break;
+
+      case "TRAFFIC":
+        this.infoTraffic = payload;
         break;
 
       case "UPDATE":
         this.config.lastUpdate = payload.lastUpdate;
+        this.loaded = true;
         this.updateDom();
         break;
     }
diff --git a/node_helper.js b/node_helper.js
index 165884b..d051101 100644
--- a/node_helper.js
+++ b/node_helper.js
@@ -83,7 +83,6 @@ module.exports = NodeHelper.create({
     var self = this;
     var urlArret, urlHoraire, stopConfig;
     if (this.config.debug) { console.log (' *** fetching update');}
-    self.sendSocketNotification("UPDATE", { lastUpdate : new Date()});
     for (var index in self.config.busStations) {
         var stopData = {};
       stopConfig = self.config.busStations[index];
@@ -92,6 +91,10 @@ module.exports = NodeHelper.create({
       urlHoraire = self.config.tanURL+'tempsattente.json/'+stopConfig.arret;
       self.getResponse(urlHoraire, self.processHorairesLigne.bind(this), stopConfig, stopData);
     }
+    urlInfoTrafic = 'https://data.nantesmetropole.fr/api/records/1.0/search/?dataset=244400404_info-trafic-tan-temps-reel&q=';
+    self.getResponse(urlInfoTrafic, self.processInfoTrafic.bind(this), self.config.busStations);
+
+    self.sendSocketNotification("UPDATE", { lastUpdate : new Date()});
   },
 
   processArret: function(data, stopConfig,stopData) {
@@ -119,4 +122,34 @@ module.exports = NodeHelper.create({
       this.sendSocketNotification("BUS", stopData);
   },
 
+  processInfoTrafic: function(data, busStations, unused) {
+    if (this.config.debug) { console.log (' *** processInfoTrafic request response'); console.log (data); }
+    var traficInfo = []
+    var currentDate = new Date();
+    for (var i = 0; i < data.records.length; i++) {
+      var fields = data.records[i].fields;
+      var startDate = new Date(fields.date_debut + 'T' + fields.heure_debut + 'Z');
+      var endDate = null;
+      if (fields.date_fin) {
+        endDate = new Date(fields.date_fin + 'T' + fields.heure_fin + 'Z');
+      }
+
+      var isApplied = false;
+      if (fields.perturbation_terminee == 0 && startDate <= currentDate
+      && (endDate == null || endDate >= currentDate)) {
+        var tronconsList = fields.troncons.split(";");
+        for (var j = 0 ; j < tronconsList.length && !isApplied; j++) {
+          var tronconInfo = tronconsList[j].slice(1).split("/");
+          for (var k = 0; k < busStations.length && !isApplied; k++) {
+            if (tronconInfo[0] == busStations[k].ligne && (tronconInfo[1] == '' || tronconInfo[1] == busStations[k].sens)) {
+              traficInfo.push(fields.intitule);
+              isApplied = true;
+            }
+          }
+        }
+      }
+    }
+    this.sendSocketNotification("TRAFFIC", traficInfo);
+  },
+
 });
diff --git a/MMM-Saint.js b/MMM-Saint.js
index 19306fc..1de9789 100644
--- a/MMM-Saint.js
+++ b/MMM-Saint.js
@@ -46,7 +46,7 @@ Module.register("MMM-Saint", {
 
   displayData: function() {
     var saint = document.getElementById("SAINT")
-    saint.innerHTML = "<span class=\"fas fa-bible\"></span> " + this.Saint
+    saint.innerHTML = "<span class=\"fas fa-crown\"></span> " + this.Saint
   },
 
 /*
diff --git a/MMM-Pollen-FR.js b/MMM-Pollen-FR.js
index 4d34a77..0766505 100644
--- a/MMM-Pollen-FR.js
+++ b/MMM-Pollen-FR.js
@@ -8,7 +8,8 @@ Module.register("MMM-Pollen-FR", {
         updateInterval: 3 * 60 * 60 * 1000, // every 12 hours
         region_code: "75",
         fadeSpeed: 2000,
-		minLevel: 0
+		minLevel: 0,
+        hideBelowMinLevel: true,
     },
 
     start: function() {
@@ -35,6 +36,7 @@ Module.register("MMM-Pollen-FR", {
 		
         console.log("MMM-Pollen-FR : starting generate DOM ...");
 		var minlevel = 0
+		var isLevel = false;
 
         if(this.config.minLevel != undefined){
             minlevel = this.config.minLevel;
@@ -112,6 +114,7 @@ Module.register("MMM-Pollen-FR", {
                 var allergens = [];
 
                 if (level > minlevel) {
+					isLevel = true;
                     allergens.push(pollenName);
                 
 					var td1 = document.createElement("td");
@@ -141,6 +144,17 @@ Module.register("MMM-Pollen-FR", {
         }
 
         wrapper.appendChild(tbl);
+		if (!isLevel) {
+			wrapper.innerHTML = "Pas d'allergène niveau ≥ " + minlevel;
+
+            if (this.config.hideBelowMinLevel) {
+                this.hide();
+            } else {
+                this.show();
+            }    
+		} else {
+            this.show();
+        }
         return wrapper;
     },
 
diff --git a/README.md b/README.md
index 3f60e01..f4e306b 100644
--- a/README.md
+++ b/README.md
@@ -17,6 +17,7 @@ The entry in `config.js` can include the following options:
 |`updateInterval`|**Required** update interval to refresh data for api pollen FR<br><br>**Type:** `string`<br>**Default value:** `null`|
 |`region_code`|This is the region code (example : 75 for Paris) of the location you want to get the pollen risks for.<br><br>**Type:** `number`<br>**Default value:** `null`|
 |`minLevel`|This is the minimal risk you want to display.<br><br>**Type:** `number`<br>**Default value:** `1`|
+|`hideBelowMinLevel`|Hide module if level is below minimal risk you want to display.<br><br>**Type:** `boolean`<br>**Default value:** `true`|
 
 Here is an example of an entry in `config.js`
 ```
diff --git a/MMM-VigilanceMeteoFrance.js b/MMM-VigilanceMeteoFrance.js
index 5539eba..7be3b80 100644
--- a/MMM-VigilanceMeteoFrance.js
+++ b/MMM-VigilanceMeteoFrance.js
@@ -276,6 +276,9 @@ Module.register("MMM-VigilanceMeteoFrance", {
 
 			this.sendSocketNotification('CONFIG', this.config);
 		}
+		if (notification === "MODULE_DOM_CREATED") {
+			this.sendSocketNotification('CONFIG', this.config);
+		}
 	},
 
 	// Use the received data to set the various values before update DOM
diff --git a/node_helper.js b/node_helper.js
index c234443..8651852 100644
--- a/node_helper.js
+++ b/node_helper.js
@@ -64,7 +64,6 @@ module.exports = NodeHelper.create({
 		var self = this;
 		if (notification === 'CONFIG') {
 			self.config = payload;
-			self.sendSocketNotification("STARTED", true);
 			self.getData();
 		}
 	}
diff --git a/package.json b/package.json
index 0af54ca..5d0340a 100644
--- a/package.json
+++ b/package.json
@@ -7,7 +7,7 @@
   "license": "MIT",
   "dependencies": {
     "node-fetch": "^2.6.0",
-    "xml2js": "^0.4.22"
+    "xml2js": "^0.4.23"
   },
   "repository": {
     "type": "git",
diff --git a/Spotify.js b/Spotify.js
index da28e28..4a1af88 100644
--- a/Spotify.js
+++ b/Spotify.js
@@ -237,7 +237,7 @@ class Spotify {
 
   async waitForFileExists(filePath, currentTime = 0, timeout = 0) {
     if (fs.existsSync(filePath)) return this.logMessage + " Authentication successful"
-    if (currentTime >= timeout) throw new Error("Token file was not created (\"" + filePath + "\")")
+    //if (currentTime >= timeout) throw new Error("Token file was not created (\"" + filePath + "\")")
     await new Promise((resolve, reject) => setTimeout(() => resolve(true), 1000))
     return this.waitForFileExists(filePath, currentTime + 1000, timeout)
   }
diff --git a/node_helper.js b/node_helper.js
index 7eea776..71fbb6d 100644
--- a/node_helper.js
+++ b/node_helper.js
@@ -21,8 +21,10 @@ module.exports = NodeHelper.create({
   },
 
   doSpotifyConfig: function (configuration, account) {
+    this.countAccount = Array.isArray(configuration) ? configuration.length : 1;
     if (!isNaN(account) && Array.isArray(configuration)) {
       this.sendSocketNotification("CURRENT_ACCOUNT", account)
+      this.currentAccountNo = account;
       return configuration[account] // only wanted account or first
     }
     if (Array.isArray(configuration)) {
@@ -32,6 +34,8 @@ module.exports = NodeHelper.create({
       })
       if (typeof found === "undefined") found = 0
       this.sendSocketNotification("CURRENT_ACCOUNT", found)
+      this.currentAccountNo = found;
+      
       return configuration[found]
     }
     // not update required not an array (single account)
@@ -78,7 +82,13 @@ module.exports = NodeHelper.create({
     // This breaks multi module instances, but saves performance and power consumption, so we reduce heat
     if (!this.suspended) {
       this.timer = setTimeout(() => {
+        if (idle && this.countAccount > 1) {
+          // Try next account at next timeout of idle state interval
+          this.currentAccountNo = (this.currentAccountNo + 1) % this.countAccount;
+          this.account(this.currentAccountNo);
+        } else {
           this.updatePulse()
+        }
       }, idle ? this.config.idleInterval : this.config.updateInterval)
     }
   },
diff --git a/package.json b/package.json
index 05a2a15..70c6cd6 100644
--- a/package.json
+++ b/package.json
@@ -24,9 +24,11 @@
     "postinstall": "node_modules/.bin/electron-rebuild -e ../../node_modules/electron"
   },
   "dependencies": {
-    "adafruit-mpr121":"latest"
+    "gyp": "^0.5.0",
+    "node-gyp": "^8.4.1",
+    "adafruit-mpr121":"github:adafruit/node_mpr121"
   },
   "devDependencies": {
-    "electron-rebuild": "^1.2.1"
+    "electron-rebuild": "^3.2.7"
   }
 }
diff --git a/MMM-FreeBox-Monitor.js b/MMM-FreeBox-Monitor.js
index cdbc859..6bc2d77 100644
--- a/MMM-FreeBox-Monitor.js
+++ b/MMM-FreeBox-Monitor.js
@@ -31,10 +31,7 @@ Module.register("MMM-FreeBox-Monitor",{
 		this.systemData ="";
 		this.needRefresh = true;
 		this.wrapper = "";
-		var self = this;
-			setInterval(function() {
-			self.updateDom(); // no speed defined, so it updates instantly.
-		}, 5000);
+		this.updateDom();
 		moment.locale(config.language);
 		this.sendSocketNotification("CONNECT", {
 				config: this.config
@@ -341,7 +338,10 @@ Module.register("MMM-FreeBox-Monitor",{
 					self.getConnectionStatus();
 					setInterval(function() {self.getCalls();self.getDownloads();self.getConnectionStatus();	}, (this.config.requestRefresh) * 1000);
 				}
+			}
 			
+			if (payload.type !== "connection") {
+				self.updateDom();
 			}
 		}
 		self.needRefresh = true;
diff --git a/node_helper.js b/node_helper.js
index c0ff8f0..fb852cd 100644
--- a/node_helper.js
+++ b/node_helper.js
@@ -7,6 +7,7 @@
 
 
 var fs = require("fs");
+var NodeHelper = require("node_helper");
 var Freeboxapi = require("./freeboxapi.js");
 var fapi;
 
diff --git a/MMM-Trello.js b/MMM-Trello.js
index 25de6a4..adc170c 100644
--- a/MMM-Trello.js
+++ b/MMM-Trello.js
@@ -24,7 +24,8 @@ Module.register("MMM-Trello", {
         showChecklists: true,
         showChecklistTitle: false,
         wholeList: false,
-        isCompleted: false
+        isCompleted: false,
+        hideCompletedItems: false,
     },
 
     // Define start sequence.
@@ -55,6 +56,20 @@ Module.register("MMM-Trello", {
         this.pause = false;
     },
 
+    suspend: function() {
+        if (this.timerRequest) {
+            clearInterval(this.timerRequest);
+        }
+        if (this.timerVisual) {
+            clearInterval(this.timerVisual);
+        }
+    },
+
+    resume: function() {
+        this.timerVisual = this.scheduleVisualUpdateInterval();
+        this.timerRequest = this.scheduleVisualUpdateInterval();
+    },
+
     /* scheduleVisualUpdateInterval()
      * Schedule visual update.
      */
@@ -63,7 +78,7 @@ Module.register("MMM-Trello", {
 
         self.updateDom(self.config.animationSpeed);
 
-        setInterval(function () {
+        this.timerVisual = setInterval(function () {
             if (self.pause) {
                 return;
             }
@@ -78,7 +93,7 @@ Module.register("MMM-Trello", {
     scheduleUpdateRequestInterval: function () {
         var self = this;
 
-        setInterval(function () {
+        this.timerRequest = setInterval(function () {
             if (self.pause) {
                 return;
             }
@@ -211,6 +226,9 @@ Module.register("MMM-Trello", {
                 }
 
                 for (var item in checklist.checkItems) {
+                    if (this.config.hideCompletedItems && checklist.checkItems[item].state === "complete") {
+                        continue;
+                    }
                     var itemWrapper = document.createElement("div");
                     itemWrapper.className = "small light checklist-item";
 
diff --git a/README.md b/README.md
index c9c636a..7342848 100644
--- a/README.md
+++ b/README.md
@@ -144,6 +144,13 @@ The following properties can be configured:
 				<br><b>Default value:</b> <code>false</code>
 			</td>
 		</tr>
+		<tr>
+			<td><code>hideCompletedItems</code></td>
+			<td>If set to true, completed items in lists are not displayed.<br>
+				<br><b>Possible values:</b> <code>true</code> or <code>false</code>
+				<br><b>Default value:</b> <code>false</code>
+			</td>
+		</tr>
 	</tbody>
 </table>
 
diff --git a/MMM-Traffic.js b/MMM-Traffic.js
index 1b6dc02..af26402 100644
--- a/MMM-Traffic.js
+++ b/MMM-Traffic.js
@@ -15,7 +15,8 @@ Module.register('MMM-Traffic', {
     mode: 'driving',
     days: [0, 1, 2, 3, 4, 5, 6],
     hoursStart: '00:00',
-    hoursEnd: '23:59'
+    hoursEnd: '23:59',
+    provider: "mapbox",
   },
 
   start: function () {
@@ -39,15 +40,19 @@ Module.register('MMM-Traffic', {
 
   updateCommute: function () {
     let mode = this.config.mode == 'driving' ? 'driving-traffic' : this.config.mode;
+    if (this.config.provider == "tomtom") {
+      this.url = encodeURI(`https://api.tomtom.com/routing/1/calculateRoute/${this.config.originCoords}:${this.config.destinationCoords}/json?maxAlternatives=0&language=fr-FR&computeBestOrder=false&routeRepresentation=polyline&computeTravelTimeFor=all&sectionType=travelMode&callback=callback&departAt=now&routeType=fastest&traffic=true&avoid=unpavedRoads&travelMode=car&vehicleMaxSpeed=0&vehicleWeight=0&vehicleAxleWeight=0&vehicleLength=0&vehicleWidth=0&vehicleHeight=0&vehicleCommercial=false&vehicleEngineType=combustion&key=${this.config.accessToken}`);
+    } else {
       this.url = encodeURI(`https://api.mapbox.com/directions/v5/mapbox/${mode}/${this.config.originCoords};${this.config.destinationCoords}?access_token=${this.config.accessToken}`);
+    }
 
     // only run getDom once at the start of a hidden period to remove the module from the screen, then just wait until time to unhide to run again
-    if (this.shouldHide() && !this.internalHidden) {
+    if (this.shouldHide()) {
       console.log('Hiding MMM-Traffic due to config options: days, hoursStart, hoursEnd');
       this.internalHidden = true;
-      this.updateDom();
+      this.hide();
     } else if (!this.shouldHide()) {
-      this.internalHidden = false;
+      this.show();
       this.getCommute(this.url);
     }
     // no network requests are made when the module is hidden, so check every 30 seconds during hidden
@@ -60,7 +65,14 @@ Module.register('MMM-Traffic', {
     fetch(api_url)
       .then(self.checkStatus)
       .then(json => {
+		self.trafficDelay = "—"
+        if (this.config.provider == "tomtom") {
+          self.duration = Math.round(json.routes[0].summary.travelTimeInSeconds / 60);
+          self.trafficDelay = Math.round(json.routes[0].summary.trafficDelayInSeconds / 60);
+        } else {
           self.duration = Math.round(json.routes[0].duration / 60);
+        }
+
         self.errorMessage = self.errorDescription = undefined;
         self.loading = false;
         self.updateDom();
@@ -141,7 +153,7 @@ Module.register('MMM-Traffic', {
   },
 
   replaceTokens: function (text) {
-    return text.replace(/{duration}/g, this.duration);
+    return text.replace(/{duration}/g, this.duration).replace(/{trafficDelay}/g, this.trafficDelay);
   },
 
   shouldHide: function () {
diff --git a/README.md b/README.md
index 034ecbc..0f9846a 100644
--- a/README.md
+++ b/README.md
@@ -78,6 +78,7 @@ _Note: Google maps coordinates are `latitude,longitude`, but Mapbox uses `longit
 | Option       | Description                                       | Type    | Default Value           | Supported Options    |
 | ------------ | ------------------------------------------------- | ------- | ----------------------- | -------------------  |
 | `mode`       | Change the module to cycling or walking.          | string  | `'driving'`             | `'walking' 'cycling'`|
+| `provider`   | mapbox or tomtom                                  | string  | `'mapbox'`              | `'mapbox' 'tomtom'`  |
 | `language`   | Define the commute time language.                 | string  | `config.language`       | Any language string  |
 | `interval`   | How often the traffic is updated in milliseconds. | integer | `300000`<br>(5 minutes) |                      |
 | `showSymbol` | Whether to show the car symbol or not.            | boolean | true                    |                      |
@@ -98,8 +99,9 @@ in firstLine/secondLine._
 #### Tokens
 
 | Token            | Value                                            |
-| ------------ | --------------------------------------------- |
-| `{duration}` | The driving time returned from the mapbox API |
+| ---------------- | ------------------------------------------------ |
+| `{duration}`     | The driving time  returned from the provider API |
+| `{trafficDelay}` | The driving delay returned from the provider API (only with tomtom) |
 
 ### Per Day/Time Customization
 
diff --git a/package.json b/package.json
index d9616a3..9fe0c29 100644
--- a/package.json
+++ b/package.json
@@ -18,6 +18,7 @@
   "dependencies": {
     "ical.js": "^1.4.0",
     "moment": "^2.23.0",
+    "request": "^2.88.2",
     "uuid": "^8.3.2"
   }
 }
diff --git a/modules/default/clock/clock.js b/modules/default/clock/clock.js
index 52cdb7e0..425646b3 100644
--- a/modules/default/clock/clock.js
+++ b/modules/default/clock/clock.js
@@ -88,6 +88,30 @@ Module.register("clock", {
 		// Set locale.
 		moment.locale(config.language);
 	},
+
+	getMoonIcon: function(phase) {
+		const intPercent = (phase * 100) .toFixed();
+		if (intPercent === 0) {
+			return "moon-alt-new";
+		} else if (intPercent < 25) {
+			return "moon-alt-waxing-crescent-" + (1 + Math.floor((intPercent - 0) * 6 / 25));
+		} else if (intPercent === 25) {
+			return "moon-alt-first-quarter";
+		} else if (intPercent < 50) {
+			return "moon-alt-waxing-gibbous-" + (1 + Math.floor((intPercent - 25) * 6 / 25));
+		} else if (intPercent === 50) {
+			return "moon-alt-full";
+		} else if (intPercent < 75) {
+			return "moon-alt-waning-gibbous-" + (1 + Math.floor((intPercent - 50) * 6 / 25));
+		} else if (intPercent === 75) {
+			return "moon-alt-third-quarter";
+		} else if (intPercent < 100) {
+			return "moon-alt-waning-crescent-" + (1 + Math.floor((intPercent - 75) * 6 / 25));
+		} else /* if (intPercent === 100) */ {
+			return "moon-alt-new";
+		}
+	},
+
 	// Override dom generator.
 	getDom: function () {
 		const wrapper = document.createElement("div");
@@ -186,26 +210,33 @@ Module.register("clock", {
 			const sunTimes = SunCalc.getTimes(now, this.config.lat, this.config.lon);
 			const isVisible = now.isBetween(sunTimes.sunrise, sunTimes.sunset);
 			let nextEvent;
+			let sunDelta;
 			if (now.isBefore(sunTimes.sunrise)) {
+				const yesterdaySunTimes = SunCalc.getTimes(now.clone().subtract(1, "day"), this.config.lat, this.config.lon);
+				sunDelta = moment.duration(moment(sunTimes.sunset).diff(sunTimes.sunrise)).subtract(moment(yesterdaySunTimes.sunset).diff(yesterdaySunTimes.sunrise));				
 				nextEvent = sunTimes.sunrise;
 			} else if (now.isBefore(sunTimes.sunset)) {
+				const yesterdaySunTimes = SunCalc.getTimes(now.clone().subtract(1, "day"), this.config.lat, this.config.lon);
+				sunDelta = moment.duration(moment(sunTimes.sunset).diff(sunTimes.sunrise)).subtract(moment(yesterdaySunTimes.sunset).diff(yesterdaySunTimes.sunrise));				
 				nextEvent = sunTimes.sunset;
 			} else {
 				const tomorrowSunTimes = SunCalc.getTimes(now.clone().add(1, "day"), this.config.lat, this.config.lon);
+				sunDelta = moment.duration(moment(tomorrowSunTimes.sunset).diff(tomorrowSunTimes.sunrise)).subtract(moment(sunTimes.sunset).diff(sunTimes.sunrise));
 				nextEvent = tomorrowSunTimes.sunrise;
 			}
 			const untilNextEvent = moment.duration(moment(nextEvent).diff(now));
-			const untilNextEventString = untilNextEvent.hours() + "h " + untilNextEvent.minutes() + "m";
+			//const untilNextEventString = untilNextEvent.hours() + "h " + untilNextEvent.minutes() + "m";
+			const untilNextEventString = ((sunDelta.minutes() > 0) ? "+" : "") + sunDelta.minutes() + "m";
 			sunWrapper.innerHTML =
 				'<span class="' +
 				(isVisible ? "bright" : "") +
-				'"><i class="fa fa-sun-o" aria-hidden="true"></i> ' +
+				'"><i class="wi weathericon wi-day-sunny" aria-hidden="true"></i> ' +
 				untilNextEventString +
 				"</span>" +
-				'<span><i class="fa fa-arrow-up" aria-hidden="true"></i> ' +
+				'<span><i class="wi weathericon wi-sunrise" aria-hidden="true"></i> ' +
 				formatTime(this.config, sunTimes.sunrise) +
 				"</span>" +
-				'<span><i class="fa fa-arrow-down" aria-hidden="true"></i> ' +
+				'<span><i class="wi weathericon wi-sunset" aria-hidden="true"></i> ' +
 				formatTime(this.config, sunTimes.sunset) +
 				"</span>";
 			digitalWrapper.appendChild(sunWrapper);
@@ -227,16 +258,18 @@ Module.register("clock", {
 			}
 			const isVisible = now.isBetween(moonRise, moonSet) || moonTimes.alwaysUp === true;
 			const illuminatedFractionString = Math.round(moonIllumination.fraction * 100) + "%";
+
+			const moonIcon = this.getMoonIcon(moonIllumination.phase);
 			moonWrapper.innerHTML =
 				'<span class="' +
 				(isVisible ? "bright" : "") +
-				'"><i class="fa fa-moon-o" aria-hidden="true"></i> ' +
+				`"><i class="wi weathericon wi-${moonIcon} aria-hidden="true"></i> ` +
 				illuminatedFractionString +
 				"</span>" +
-				'<span><i class="fa fa-arrow-up" aria-hidden="true"></i> ' +
+				'<span><i class="wi weathericon wi-moonrise" aria-hidden="true"></i> ' +
 				(moonRise ? formatTime(this.config, moonRise) : "...") +
 				"</span>" +
-				'<span><i class="fa fa-arrow-down" aria-hidden="true"></i> ' +
+				'<span><i class="wi weathericon wi-moonset" aria-hidden="true"></i> ' +
 				(moonSet ? formatTime(this.config, moonSet) : "...") +
 				"</span>";
 			digitalWrapper.appendChild(moonWrapper);
diff --git a/modules/default/weather/current.njk b/modules/default/weather/current.njk
index 40746e82..75b8e27b 100755
--- a/modules/default/weather/current.njk
+++ b/modules/default/weather/current.njk
@@ -1,15 +1,20 @@
 {% if current %}
     {% if not config.onlyTemp %}
         <div class="normal medium">
+            {% if config.useBeaufort %}
             <span class="wi wi-strong-wind dimmed"></span>
+            {% else %}
+            <span class="wi wi-wind-beaufort-{{ current.beaufortWindSpeed() | round }} dimmed"></span>
+            {% endif %}
+            <span>
             <span>
                 {% if config.useBeaufort %}
-                    {{ current.beaufortWindSpeed() | round }}
+                    {{ current.beaufortWindSpeed() | round }}</span>
                 {% else %}
                     {% if config.useKmh %}
-                        {{ current.kmhWindSpeed() | round }}
+                        {{ current.kmhWindSpeed() | round }} </span><span class="unit">km/h</span>
                     {% else %}
-                        {{ current.windSpeed | round }}
+                        {{ current.windSpeed | round }} </span><span class="unit">mi/h</span>
                     {% endif %}
                 {% endif %}
                 {% if config.showWindDirection %}
diff --git a/modules/default/weather/providers/openweathermap.js b/modules/default/weather/providers/openweathermap.js
index c1258d3c..eaca5fc3 100755
--- a/modules/default/weather/providers/openweathermap.js
+++ b/modules/default/weather/providers/openweathermap.js
@@ -23,7 +23,8 @@ WeatherProvider.register("openweathermap", {
 		location: false,
 		lat: 0, // the onecall endpoint needs lat / lon values, it doesn'T support the locationId
 		lon: 0,
-		apiKey: ""
+		apiKey: "",
+		expandDaySections: false,
 	},
 
 	// Overwrite the fetchCurrentWeather method.
@@ -86,6 +87,28 @@ WeatherProvider.register("openweathermap", {
 			.finally(() => this.updateAvailable());
 	},
 
+	// Fill all data (current, hourly, forecast) with only 1 call to /onecall API
+	fetchWeatherAll() {
+		if (this.config.weatherEndpoint === "/onecall") {
+			this.fetchData(this.getUrl())
+			.then((data) => {
+				const weatherData = this.generateWeatherObjectsFromOnecall(data);
+				// onecall get all the data - so fill them at once
+				this.setCurrentWeather(weatherData.current);
+				this.setWeatherHourly(weatherData.hours);
+				this.setWeatherForecast(weatherData.days);		
+
+				this.setFetchedLocation(`${data.timezone}`);
+			})
+			.catch(function (request) {
+				Log.error("Could not load data ... ", request);
+			})
+			.finally(() => this.updateAvailable());
+		} else {
+			Log.error("Must be called with weatherEndpoint /onecall");
+		}
+	},
+
 	/**
 	 * Overrides method for setting config to check if endpoint is correct for hourly
 	 *
@@ -135,7 +158,7 @@ WeatherProvider.register("openweathermap", {
 			currentWeather.windSpeed = currentWeatherData.wind.speed;
 		}
 		currentWeather.windDirection = currentWeatherData.wind.deg;
-		currentWeather.weatherType = this.convertWeatherType(currentWeatherData.weather[0].icon);
+		currentWeather.weatherType = this.convertWeatherType(currentWeatherData.weather[0].icon, currentWeatherData.weather[0].id);
 		currentWeather.sunrise = moment(currentWeatherData.sys.sunrise, "X");
 		currentWeather.sunset = moment(currentWeatherData.sys.sunset, "X");
 
@@ -208,11 +231,11 @@ WeatherProvider.register("openweathermap", {
 				weather.date = moment(forecast.dt, "X");
 
 				// If the first value of today is later than 17:00, we have an icon at least!
-				weather.weatherType = this.convertWeatherType(forecast.weather[0].icon);
+				weather.weatherType = this.convertWeatherType(forecast.weather[0].icon, forecast.weather[0].id);
 			}
 
 			if (moment(forecast.dt, "X").format("H") >= 8 && moment(forecast.dt, "X").format("H") <= 17) {
-				weather.weatherType = this.convertWeatherType(forecast.weather[0].icon);
+				weather.weatherType = this.convertWeatherType(forecast.weather[0].icon, forecast.weather[0].id);
 			}
 
 			// the same day as before
@@ -262,7 +285,7 @@ WeatherProvider.register("openweathermap", {
 			weather.date = moment(forecast.dt, "X");
 			weather.minTemperature = forecast.temp.min;
 			weather.maxTemperature = forecast.temp.max;
-			weather.weatherType = this.convertWeatherType(forecast.weather[0].icon);
+			weather.weatherType = this.convertWeatherType(forecast.weather[0].icon, forecast.weather[0].id);
 			weather.rain = 0;
 			weather.snow = 0;
 
@@ -311,7 +334,7 @@ WeatherProvider.register("openweathermap", {
 			current.sunrise = moment(data.current.sunrise, "X").utcOffset(data.timezone_offset / 60);
 			current.sunset = moment(data.current.sunset, "X").utcOffset(data.timezone_offset / 60);
 			current.temperature = data.current.temp;
-			current.weatherType = this.convertWeatherType(data.current.weather[0].icon);
+			current.weatherType = this.convertWeatherType(data.current.weather[0].icon, data.current.weather[0].id);
 			current.humidity = data.current.humidity;
 			if (data.current.hasOwnProperty("rain") && !isNaN(data.current["rain"]["1h"])) {
 				if (this.config.units === "imperial") {
@@ -348,7 +371,7 @@ WeatherProvider.register("openweathermap", {
 				weather.humidity = hour.humidity;
 				weather.windSpeed = hour.wind_speed;
 				weather.windDirection = hour.wind_deg;
-				weather.weatherType = this.convertWeatherType(hour.weather[0].icon);
+				weather.weatherType = this.convertWeatherType(hour.weather[0].icon, hour.weather[0].id);
 				precip = false;
 				if (hour.hasOwnProperty("rain") && !isNaN(hour.rain["1h"])) {
 					if (this.config.units === "imperial") {
@@ -379,7 +402,17 @@ WeatherProvider.register("openweathermap", {
 		const days = [];
 		if (data.hasOwnProperty("daily")) {
 			for (const day of data.daily) {
-				weather.date = moment(day.dt, "X").utcOffset(data.timezone_offset / 60);
+				let offset = [12];
+				let sections = [day.temp.day]
+				if (this.config.expandDaySections) {
+					offset = [6, 12, 18, 21]; // 6 hours between each section
+					sections = [day.temp.morn, day.temp.day, day.temp.eve, day.temp.night];
+					sections_feelsLike = [day.feels_like.morn, day.feels_like.day, day.feels_like.eve, day.feels_like.night];
+				}
+				for (i = 0; i < sections.length; i++) {
+					weather.date = moment(day.dt, "X").utcOffset(data.timezone_offset / 60).startOf('day').add(offset[i], 'hours');
+					weather.temperature = sections[i];
+					weather.feelsLikeTemp = sections_feelsLike[i];
 					weather.sunrise = moment(day.sunrise, "X").utcOffset(data.timezone_offset / 60);
 					weather.sunset = moment(day.sunset, "X").utcOffset(data.timezone_offset / 60);
 					weather.minTemperature = day.temp.min;
@@ -387,7 +420,7 @@ WeatherProvider.register("openweathermap", {
 					weather.humidity = day.humidity;
 					weather.windSpeed = day.wind_speed;
 					weather.windDirection = day.wind_deg;
-				weather.weatherType = this.convertWeatherType(day.weather[0].icon);
+					weather.weatherType = this.convertWeatherType(day.weather[0].icon, day.weather[0].id);
 					precip = false;
 					if (!isNaN(day.rain)) {
 						if (this.config.units === "imperial") {
@@ -395,6 +428,7 @@ WeatherProvider.register("openweathermap", {
 						} else {
 							weather.rain = day.rain;
 						}
+						weather.rain /= sections.length;
 						precip = true;
 					}
 					if (!isNaN(day.snow)) {
@@ -403,6 +437,7 @@ WeatherProvider.register("openweathermap", {
 						} else {
 							weather.snow = day.snow;
 						}
+						weather.snow /= sections.length;
 						precip = true;
 					}
 					if (precip) {
@@ -413,6 +448,7 @@ WeatherProvider.register("openweathermap", {
 					weather = new WeatherObject(this.config.units, this.config.tempUnits, this.config.windUnits, this.config.useKmh);
 				}
 			}
+		}
 
 		return { current: current, hours: hours, days: days };
 	},
@@ -445,6 +481,98 @@ WeatherProvider.register("openweathermap", {
 		return weatherTypes.hasOwnProperty(weatherType) ? weatherTypes[weatherType] : null;
 	},
 
+/*	convertWeatherType(weatherIcon, weatherId) {
+		const weatherTypes = {
+			// "11d": "thunderstorm",
+			// "11n": "night-thunderstorm",
+			"200": ["day-storm-showers", "night-alt-storm-showers"],
+			"201": ["day-thunderstorm", "night-alt-thunderstorm"],
+			"202": ["thunderstorm", "thunderstorm"],
+			"210": ["day-storm-showers", "night-alt-storm-showers"],
+			"211": ["day-thunderstorm", "night-alt-thunderstorm"],
+			"212": ["thunderstorm", "thunderstorm"],
+			"221": ["thunderstorm", "thunderstorm"],
+			"230": ["day-storm-showers", "night-alt-storm-showers"],
+			"231": ["day-thunderstorm", "night-alt-thunderstorm"],
+			"232": ["thunderstorm", "thunderstorm"],
+
+			// "09d": "showers",
+			// "09n": "night-showers",
+			"300": ["showers", "showers"],
+			"301": ["rain-mix", "rain-mix"],
+			"302": ["rain", "rain"],
+			"310": ["showers", "showers"],
+			"311": ["rain-mix", "rain-mix"],
+			"312": ["rain", "rain"],
+			"313": ["showers", "showers"],
+			"314": ["rain-mix", "rain-mix"],
+			"321": ["rain", "rain"],
+
+			// "10d": "rain",
+			// "10n": "night-rain",
+			"500": ["day-showers", "night-alt-showers"],
+			"501": ["day-rain-mix", "night-alt-rain-mix"],
+			"502": ["day-rain", "night-alt-rain"],
+			"503": ["rain", "rain"],
+			"504": ["rain", "rain"],
+			// "13d": "snow",
+			// "13n": "night-snow",
+			"511": ["day-snow", "night-alt-snow"],
+			// "09d": "showers",
+			// "09n": "night-showers",
+			"520": ["day-showers", "night-alt-showers"],
+			"521": ["day-rain-mix", "night-alt-rain-mix"],
+			"522": ["rain", "rain"],
+			"531": ["rain", "rain"],
+
+			// "13d": "snow",
+			// "13n": "night-snow",
+			"600": ["day-snow", "night-alt-snow"],
+			"601": ["day-snow", "night-alt-snow"],
+			"602": ["snow", "snow"],
+			"611": ["day-sleet", "night-alt-sleet"],
+			"612": ["day-sleet", "night-alt-sleet"],
+			"613": ["day-sleet", "night-alt-sleet"],
+			"615": ["day-snow", "night-alt-snow"],
+			"616": ["day-snow", "night-alt-snow"],
+			"620": ["day-snow", "night-alt-snow"],
+			"621": ["day-snow", "night-alt-snow"],
+			"622": ["snow", "wi-day-snow"],
+
+			// "50d": "fog",
+			// "50n": "night-alt-cloudy-windy"
+			"701": ["day-fog", "night-fog"],
+			"711": ["smoke", "smoke"],
+			"721": ["day-haze", "night-fog"],
+			"731": ["sandstorm", "sandstorm"],
+			"741": ["day-fog", "night-fog"], // or neutral "fog"
+			"751": ["sandstorm", "sandstorm"],
+			"761": ["dust", "dust"],
+			"762": ["volcan", "volcan"],
+			"771": ["", ""],
+			"781": ["tornado", "tornado"],
+
+			// "01d": "day-sunny",
+			// "01n": "night-clear",
+			"800": ["day-sunny", "night-clear"],
+
+			// "02d": "day-cloudy",
+			// "02n": "night-cloudy",
+			"801": ["day-cloudy-high", "night-cloudy-high"],
+			// "03d": "cloudy",
+			// "03n": "night-cloudy",
+			"802": ["day-cloudy", "night-cloudy"],
+			// "04d": "cloudy-windy",
+			// "04n": "night-cloudy",
+			"803": ["cloud", "cloud"],
+			"804": ["cloudy", "cloudy"],
+		};
+
+		const idxDay = weatherIcon.match(/n$/) ? 1 : 0;
+		return weatherTypes.hasOwnProperty(weatherId) ? weatherTypes[weatherId][idxDay] : null;
+	},
+*/
+
 	/* getParams(compliments)
 	 * Generates an url with api parameters based on the config.
 	 *
diff --git a/package.json b/package.json
index ca01ad5e..78f77ebe 100644
--- a/package.json
+++ b/package.json
@@ -83,6 +83,7 @@
 		"moment": "^2.29.1",
 		"node-fetch": "^2.6.6",
 		"node-ical": "^0.13.0",
+		"request": "^2.88.2",
 		"socket.io": "^4.4.0"
 	},
 	"_moduleAliases": {
