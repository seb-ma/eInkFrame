diff --git a/Spotify.js b/Spotify.js
index da28e28..4a1af88 100644
--- a/Spotify.js
+++ b/Spotify.js
@@ -237,7 +237,7 @@ class Spotify {
 
   async waitForFileExists(filePath, currentTime = 0, timeout = 0) {
     if (fs.existsSync(filePath)) return this.logMessage + " Authentication successful"
-    if (currentTime >= timeout) throw new Error("Token file was not created (\"" + filePath + "\")")
+    //if (currentTime >= timeout) throw new Error("Token file was not created (\"" + filePath + "\")")
     await new Promise((resolve, reject) => setTimeout(() => resolve(true), 1000))
     return this.waitForFileExists(filePath, currentTime + 1000, timeout)
   }
diff --git a/node_helper.js b/node_helper.js
index 7eea776..71fbb6d 100644
--- a/node_helper.js
+++ b/node_helper.js
@@ -21,8 +21,10 @@ module.exports = NodeHelper.create({
   },
 
   doSpotifyConfig: function (configuration, account) {
+    this.countAccount = Array.isArray(configuration) ? configuration.length : 1;
     if (!isNaN(account) && Array.isArray(configuration)) {
       this.sendSocketNotification("CURRENT_ACCOUNT", account)
+      this.currentAccountNo = account;
       return configuration[account] // only wanted account or first
     }
     if (Array.isArray(configuration)) {
@@ -32,6 +34,8 @@ module.exports = NodeHelper.create({
       })
       if (typeof found === "undefined") found = 0
       this.sendSocketNotification("CURRENT_ACCOUNT", found)
+      this.currentAccountNo = found;
+      
       return configuration[found]
     }
     // not update required not an array (single account)
@@ -78,7 +82,13 @@ module.exports = NodeHelper.create({
     // This breaks multi module instances, but saves performance and power consumption, so we reduce heat
     if (!this.suspended) {
       this.timer = setTimeout(() => {
+        if (idle && this.countAccount > 1) {
+          // Try next account at next timeout of idle state interval
+          this.currentAccountNo = (this.currentAccountNo + 1) % this.countAccount;
+          this.account(this.currentAccountNo);
+        } else {
           this.updatePulse()
+        }
       }, idle ? this.config.idleInterval : this.config.updateInterval)
     }
   },
