diff --git a/modules/default/clock/clock.js b/modules/default/clock/clock.js
index 7c9310f0..b059babb 100644
--- a/modules/default/clock/clock.js
+++ b/modules/default/clock/clock.js
@@ -88,6 +88,30 @@ Module.register("clock", {
 		// Set locale.
 		moment.locale(config.language);
 	},
+
+	getMoonIcon: function(phase) {
+		const intPercent = (phase * 100) .toFixed();
+		if (intPercent === 0) {
+			return "moon-alt-new";
+		} else if (intPercent < 25) {
+			return "moon-alt-waxing-crescent-" + (1 + Math.floor((intPercent - 0) * 6 / 25));
+		} else if (intPercent === 25) {
+			return "moon-alt-first-quarter";
+		} else if (intPercent < 50) {
+			return "moon-alt-waxing-gibbous-" + (1 + Math.floor((intPercent - 25) * 6 / 25));
+		} else if (intPercent === 50) {
+			return "moon-alt-full";
+		} else if (intPercent < 75) {
+			return "moon-alt-waning-gibbous-" + (1 + Math.floor((intPercent - 50) * 6 / 25));
+		} else if (intPercent === 75) {
+			return "moon-alt-third-quarter";
+		} else if (intPercent < 100) {
+			return "moon-alt-waning-crescent-" + (1 + Math.floor((intPercent - 75) * 6 / 25));
+		} else /* if (intPercent === 100) */ {
+			return "moon-alt-new";
+		}
+	},
+
 	// Override dom generator.
 	getDom: function () {
 		const wrapper = document.createElement("div");
@@ -186,26 +210,33 @@ Module.register("clock", {
 			const sunTimes = SunCalc.getTimes(now, this.config.lat, this.config.lon);
 			const isVisible = now.isBetween(sunTimes.sunrise, sunTimes.sunset);
 			let nextEvent;
+			let sunDelta;
 			if (now.isBefore(sunTimes.sunrise)) {
+				const yesterdaySunTimes = SunCalc.getTimes(now.clone().subtract(1, "day"), this.config.lat, this.config.lon);
+				sunDelta = moment.duration(moment(sunTimes.sunset).diff(sunTimes.sunrise)).subtract(moment(yesterdaySunTimes.sunset).diff(yesterdaySunTimes.sunrise));				
 				nextEvent = sunTimes.sunrise;
 			} else if (now.isBefore(sunTimes.sunset)) {
+				const yesterdaySunTimes = SunCalc.getTimes(now.clone().subtract(1, "day"), this.config.lat, this.config.lon);
+				sunDelta = moment.duration(moment(sunTimes.sunset).diff(sunTimes.sunrise)).subtract(moment(yesterdaySunTimes.sunset).diff(yesterdaySunTimes.sunrise));				
 				nextEvent = sunTimes.sunset;
 			} else {
 				const tomorrowSunTimes = SunCalc.getTimes(now.clone().add(1, "day"), this.config.lat, this.config.lon);
+				sunDelta = moment.duration(moment(tomorrowSunTimes.sunset).diff(tomorrowSunTimes.sunrise)).subtract(moment(sunTimes.sunset).diff(sunTimes.sunrise));
 				nextEvent = tomorrowSunTimes.sunrise;
 			}
 			const untilNextEvent = moment.duration(moment(nextEvent).diff(now));
-			const untilNextEventString = untilNextEvent.hours() + "h " + untilNextEvent.minutes() + "m";
+			//const untilNextEventString = untilNextEvent.hours() + "h " + untilNextEvent.minutes() + "m";
+			const untilNextEventString = ((sunDelta.minutes() > 0) ? "+" : "") + sunDelta.minutes() + "m";
 			sunWrapper.innerHTML =
 				'<span class="' +
 				(isVisible ? "bright" : "") +
-				'"><i class="fas fa-sun" aria-hidden="true"></i> ' +
+				'"><i class="wi weathericon wi-day-sunny" aria-hidden="true"></i> ' +
 				untilNextEventString +
 				"</span>" +
-				'<span><i class="fas fa-arrow-up" aria-hidden="true"></i> ' +
+				'<span><i class="wi weathericon wi-sunrise" aria-hidden="true"></i> ' +
 				formatTime(this.config, sunTimes.sunrise) +
 				"</span>" +
-				'<span><i class="fas fa-arrow-down" aria-hidden="true"></i> ' +
+				'<span><i class="wi weathericon wi-sunset" aria-hidden="true"></i> ' +
 				formatTime(this.config, sunTimes.sunset) +
 				"</span>";
 			digitalWrapper.appendChild(sunWrapper);
@@ -227,16 +258,18 @@ Module.register("clock", {
 			}
 			const isVisible = now.isBetween(moonRise, moonSet) || moonTimes.alwaysUp === true;
 			const illuminatedFractionString = Math.round(moonIllumination.fraction * 100) + "%";
+
+			const moonIcon = this.getMoonIcon(moonIllumination.phase);
 			moonWrapper.innerHTML =
 				'<span class="' +
 				(isVisible ? "bright" : "") +
-				'"><i class="fas fa-moon" aria-hidden="true"></i> ' +
+				`"><i class="wi weathericon wi-${moonIcon} aria-hidden="true"></i> ` +
 				illuminatedFractionString +
 				"</span>" +
-				'<span><i class="fas fa-arrow-up" aria-hidden="true"></i> ' +
+				'<span><i class="wi weathericon wi-moonrise" aria-hidden="true"></i> ' +
 				(moonRise ? formatTime(this.config, moonRise) : "...") +
 				"</span>" +
-				'<span><i class="fas fa-arrow-down" aria-hidden="true"></i> ' +
+				'<span><i class="wi weathericon wi-moonset" aria-hidden="true"></i> ' +
 				(moonSet ? formatTime(this.config, moonSet) : "...") +
 				"</span>";
 			digitalWrapper.appendChild(moonWrapper);
diff --git a/modules/default/weather/current.njk b/modules/default/weather/current.njk
index bfeb0b8f..a0dd397a 100755
--- a/modules/default/weather/current.njk
+++ b/modules/default/weather/current.njk
@@ -1,15 +1,20 @@
 {% if current %}
     {% if not config.onlyTemp %}
         <div class="normal medium">
+            {% if config.useBeaufort %}
             <span class="wi wi-strong-wind dimmed"></span>
+            {% else %}
+            <span class="wi wi-wind-beaufort-{{ current.beaufortWindSpeed() | round }} dimmed"></span>
+            {% endif %}
+            <span>
             <span>
                 {% if config.useBeaufort %}
-                    {{ current.beaufortWindSpeed() | round }}
+                    {{ current.beaufortWindSpeed() | round }}</span>
                 {% else %}
                     {% if config.useKmh %}
-                        {{ current.kmhWindSpeed() | round }}
+                        {{ current.kmhWindSpeed() | round }} </span><span class="unit">km/h</span>
                     {% else %}
-                        {{ current.windSpeed | round }}
+                        {{ current.windSpeed | round }} </span><span class="unit">mi/h</span>
                     {% endif %}
                 {% endif %}
                 {% if config.showWindDirection %}
@@ -38,10 +43,17 @@
             {% endif %}
         </div>
     {% endif %}
-    <div class="large light">
-        <span class="wi weathericon wi-{{current.weatherType}}"></span>
-        <span class="bright">
-            {{ current.temperature | roundValue | unit("temperature") | decimalSymbol }}
+    <div>
+        <span class="large light">
+            <span class="wi weathericon wi-{{current.weatherType}}"></span>
+            <span class="bright">
+                {{ current.temperature | roundValue | unit("temperature") | decimalSymbol }}
+            </span>
+        </span>
+        <span class="normal light uv">
+            {% if config.showUV and current.uvi %}
+                <span class="wi wi-stars uvIcon"></span><span>{{ current.uvi | round | decimalSymbol }}</span>
+            {% endif %}
         </span>
     </div>
     <div class="normal light indoor">
@@ -69,13 +81,22 @@
                     {{ "FEELS" | translate({DEGREE: current.feelsLike() | roundValue | unit("temperature") | decimalSymbol }) }}
                 </span>
             {% endif %}
-            {% if config.showPrecipitationAmount %}
+            {% if config.showPrecipitationAmount and current.precipitation %}
                 <span class="dimmed">
-                    {{ "PRECIP" | translate }} {{ current.precipitation | unit("precip") }}
+                    <span class="fas fa-umbrella"></span>
+                    <span>{{ current.precipitation | unit("precip") }}</span>
+                    <span class="small">{{ current.precipitationProba | probaValue| unit("probability") }}</span>
                 </span>
             {% endif %}
         </div>
     {% endif %}
+    {% if config.showAQI and currentPollution %}
+        <div class="normal medium pollution">
+            <span class="icon fas fa-viruses"></span>
+            {% set aqiLabel = "AQI_" + currentPollution.aqi %}
+            <span>{{ aqiLabel | translate }}</span>
+        </div>
+    {% endif %}
 {% else %}
     <div class="dimmed light small">
         {{ "LOADING" | translate }}
diff --git a/modules/default/weather/providers/openweathermap.js b/modules/default/weather/providers/openweathermap.js
index b0f5eedf..bc210a5a 100755
--- a/modules/default/weather/providers/openweathermap.js
+++ b/modules/default/weather/providers/openweathermap.js
@@ -23,7 +23,8 @@ WeatherProvider.register("openweathermap", {
 		location: false,
 		lat: 0, // the onecall endpoint needs lat / lon values, it doesn'T support the locationId
 		lon: 0,
-		apiKey: ""
+		apiKey: "",
+		expandDaySections: false,
 	},
 
 	// Overwrite the fetchCurrentWeather method.
@@ -86,6 +87,56 @@ WeatherProvider.register("openweathermap", {
 			.finally(() => this.updateAvailable());
 	},
 
+	// Fill all data (current, hourly, forecast) with only 1 call to /onecall API
+	fetchWeatherAll() {
+		if (this.config.weatherEndpoint === "/onecall") {
+			this.fetchData(this.getUrl())
+				.then((data) => {
+					const weatherData = this.generateWeatherObjectsFromOnecall(data);
+					// onecall get all the data - so fill them at once
+					this.setCurrentWeather(weatherData.current);
+					this.setWeatherHourly(weatherData.hours);
+					this.setWeatherForecast(weatherData.days);
+
+					this.setFetchedLocation(`${data.timezone}`);
+				})
+				.catch(function (request) {
+					Log.error("Could not load data ... ", request);
+				})
+				.finally(() => this.updateAvailable());
+		} else {
+			Log.error("Must be called with weatherEndpoint /onecall");
+		}
+	},
+
+	// Retrieve current pollution
+	fetchCurrentPollution() {
+		this.fetchData(this.getUrlPollution(""))
+			.then((data) => {
+				this.setCurrentPollution(this.fetchPollutionApi(data)[0]);
+			})
+			.catch(function (request) {
+				Log.error("Could not load data ... ", request);
+			})
+			.finally(() => {
+				this.updateAvailable();
+			})
+	},
+
+	// Retrieve pollution forecast
+	fetchPollutionForecast() {
+		this.fetchData(this.getUrlPollution("/forecast"))
+			.then((data) => {
+				this.setCurrentPollution(this.fetchPollutionApi(data)[0]);
+			})
+			.catch(function (request) {
+				Log.error("Could not load data ... ", request);
+			})
+			.finally(() => {
+				this.updateAvailable();
+			})
+	},
+
 	/**
 	 * Overrides method for setting config to check if endpoint is correct for hourly
 	 *
@@ -119,6 +170,13 @@ WeatherProvider.register("openweathermap", {
 		return this.config.apiBase + this.config.apiVersion + this.config.weatherEndpoint + this.getParams();
 	},
 
+	/*
+	 * Gets the complete url for the pollution request
+	 */
+	getUrlPollution(weatherEndpoint) {
+		return this.config.apiBase + this.config.apiVersion + "/air_pollution" + weatherEndpoint + this.getParams();
+	},
+
 	/*
 	 * Generate a WeatherObject based on currentWeatherInformation
 	 */
@@ -130,7 +188,7 @@ WeatherProvider.register("openweathermap", {
 		currentWeather.feelsLikeTemp = currentWeatherData.main.feels_like;
 		currentWeather.windSpeed = currentWeatherData.wind.speed;
 		currentWeather.windDirection = currentWeatherData.wind.deg;
-		currentWeather.weatherType = this.convertWeatherType(currentWeatherData.weather[0].icon);
+		currentWeather.weatherType = this.convertWeatherType(currentWeatherData.weather[0].icon, currentWeatherData.weather[0].id);
 		currentWeather.sunrise = moment(currentWeatherData.sys.sunrise, "X");
 		currentWeather.sunset = moment(currentWeatherData.sys.sunset, "X");
 
@@ -203,11 +261,11 @@ WeatherProvider.register("openweathermap", {
 				weather.date = moment(forecast.dt, "X");
 
 				// If the first value of today is later than 17:00, we have an icon at least!
-				weather.weatherType = this.convertWeatherType(forecast.weather[0].icon);
+				weather.weatherType = this.convertWeatherType(forecast.weather[0].icon, forecast.weather[0].id);
 			}
 
 			if (moment(forecast.dt, "X").format("H") >= 8 && moment(forecast.dt, "X").format("H") <= 17) {
-				weather.weatherType = this.convertWeatherType(forecast.weather[0].icon);
+				weather.weatherType = this.convertWeatherType(forecast.weather[0].icon, forecast.weather[0].id);
 			}
 
 			// the same day as before
@@ -257,7 +315,7 @@ WeatherProvider.register("openweathermap", {
 			weather.date = moment(forecast.dt, "X");
 			weather.minTemperature = forecast.temp.min;
 			weather.maxTemperature = forecast.temp.max;
-			weather.weatherType = this.convertWeatherType(forecast.weather[0].icon);
+			weather.weatherType = this.convertWeatherType(forecast.weather[0].icon, forecast.weather[0].id);
 			weather.rain = 0;
 			weather.snow = 0;
 
@@ -306,8 +364,10 @@ WeatherProvider.register("openweathermap", {
 			current.sunrise = moment(data.current.sunrise, "X").utcOffset(data.timezone_offset / 60);
 			current.sunset = moment(data.current.sunset, "X").utcOffset(data.timezone_offset / 60);
 			current.temperature = data.current.temp;
-			current.weatherType = this.convertWeatherType(data.current.weather[0].icon);
+			current.weatherType = this.convertWeatherType(data.current.weather[0].icon, data.current.weather[0].id);
 			current.humidity = data.current.humidity;
+			current.uvi = data.current.uvi;
+			current.precipitationProba = data.hourly ? data.hourly[0].pop : undefined; // Get 1st hour as current precipitation probability
 			if (data.current.hasOwnProperty("rain") && !isNaN(data.current["rain"]["1h"])) {
 				if (this.config.units === "imperial") {
 					current.rain = data.current["rain"]["1h"] / 25.4;
@@ -341,9 +401,11 @@ WeatherProvider.register("openweathermap", {
 				weather.temperature = hour.temp;
 				weather.feelsLikeTemp = hour.feels_like;
 				weather.humidity = hour.humidity;
+				weather.uvi = hour.uvi;
+				weather.precipitationProba = hour.pop;
 				weather.windSpeed = hour.wind_speed;
 				weather.windDirection = hour.wind_deg;
-				weather.weatherType = this.convertWeatherType(hour.weather[0].icon);
+				weather.weatherType = this.convertWeatherType(hour.weather[0].icon, hour.weather[0].id);
 				precip = false;
 				if (hour.hasOwnProperty("rain") && !isNaN(hour.rain["1h"])) {
 					if (this.config.units === "imperial") {
@@ -374,42 +436,89 @@ WeatherProvider.register("openweathermap", {
 		const days = [];
 		if (data.hasOwnProperty("daily")) {
 			for (const day of data.daily) {
-				weather.date = moment(day.dt, "X").utcOffset(data.timezone_offset / 60);
-				weather.sunrise = moment(day.sunrise, "X").utcOffset(data.timezone_offset / 60);
-				weather.sunset = moment(day.sunset, "X").utcOffset(data.timezone_offset / 60);
-				weather.minTemperature = day.temp.min;
-				weather.maxTemperature = day.temp.max;
-				weather.humidity = day.humidity;
-				weather.windSpeed = day.wind_speed;
-				weather.windDirection = day.wind_deg;
-				weather.weatherType = this.convertWeatherType(day.weather[0].icon);
-				precip = false;
-				if (!isNaN(day.rain)) {
-					if (this.config.units === "imperial") {
-						weather.rain = day.rain / 25.4;
-					} else {
-						weather.rain = day.rain;
-					}
-					precip = true;
+				let offset = [12];
+				let sections = [day.temp.day];
+				let sections_feelsLike = [day.feels_like.day];
+				if (this.config.expandDaySections) {
+					offset = [6, 12, 18, 21]; // 6 hours between each section
+					sections = [day.temp.morn, day.temp.day, day.temp.eve, day.temp.night];
+					sections_feelsLike = [day.feels_like.morn, day.feels_like.day, day.feels_like.eve, day.feels_like.night];
 				}
-				if (!isNaN(day.snow)) {
-					if (this.config.units === "imperial") {
-						weather.snow = day.snow / 25.4;
-					} else {
-						weather.snow = day.snow;
+				for (i = 0; i < sections.length; i++) {
+					weather.date = moment(day.dt, "X").utcOffset(data.timezone_offset / 60).startOf('day').add(offset[i], 'hours');
+					weather.temperature = sections[i];
+					weather.feelsLikeTemp = sections_feelsLike[i];
+					weather.sunrise = moment(day.sunrise, "X").utcOffset(data.timezone_offset / 60);
+					weather.sunset = moment(day.sunset, "X").utcOffset(data.timezone_offset / 60);
+					weather.minTemperature = day.temp.min;
+					weather.maxTemperature = day.temp.max;
+					weather.humidity = day.humidity;
+					weather.uvi = day.uvi;
+					weather.precipitationProba = day.pop;
+					weather.windSpeed = day.wind_speed;
+					weather.windDirection = day.wind_deg;
+					weather.weatherType = this.convertWeatherType(day.weather[0].icon, day.weather[0].id);
+					precip = false;
+					if (!isNaN(day.rain)) {
+						if (this.config.units === "imperial") {
+							weather.rain = day.rain / 25.4;
+						} else {
+							weather.rain = day.rain;
+						}
+						weather.rain /= sections.length;
+						precip = true;
 					}
-					precip = true;
-				}
-				if (precip) {
-					weather.precipitation = weather.rain + weather.snow;
+					if (!isNaN(day.snow)) {
+						if (this.config.units === "imperial") {
+							weather.snow = day.snow / 25.4;
+						} else {
+							weather.snow = day.snow;
+						}
+						weather.snow /= sections.length;
+						precip = true;
+					}
+					if (precip) {
+						weather.precipitation = weather.rain + weather.snow;
+					}
+
+					days.push(weather);
+					weather = new WeatherObject(this.config.units, this.config.tempUnits, this.config.windUnits, this.config.useKmh);
 				}
+			}
+		}
 
-				days.push(weather);
-				weather = new WeatherObject(this.config.units, this.config.tempUnits, this.config.windUnits, this.config.useKmh);
+		const alerts = [];
+		if (data.hasOwnProperty("alerts")) {
+			for (const alert of data.alerts) {
+				alertDesc = {};
+				alertDesc.start = moment(alert.start, "X").utcOffset(data.timezone_offset / 60);
+				alertDesc.end = moment(alert.end, "X").utcOffset(data.timezone_offset / 60);
+				alertDesc.event = alert.event;
+				alertDesc.description = alert.description;
+
+				alerts.push(alertDesc);
 			}
 		}
+		return { current: current, hours: hours, days: days, alerts: alerts };
+	},
+
+	/*
+	 * fetch pollutions information
+	 */
+	fetchPollutionApi(pollutions) {
+		// initial variable declaration
+		const results = [];
+
+		for (const pollution of pollutions.list) {
+			const result = { date: null, aqi: null };
+
+			result.date = moment(pollution.dt, "X");
+			result.aqi = pollution.main.aqi;
+
+			results.push(result);
+		}
 
-		return { current: current, hours: hours, days: days };
+		return results;
 	},
 
 	/*
@@ -440,6 +549,98 @@ WeatherProvider.register("openweathermap", {
 		return weatherTypes.hasOwnProperty(weatherType) ? weatherTypes[weatherType] : null;
 	},
 
+	/*	convertWeatherType(weatherIcon, weatherId) {
+			const weatherTypes = {
+				// "11d": "thunderstorm",
+				// "11n": "night-thunderstorm",
+				"200": ["day-storm-showers", "night-alt-storm-showers"],
+				"201": ["day-thunderstorm", "night-alt-thunderstorm"],
+				"202": ["thunderstorm", "thunderstorm"],
+				"210": ["day-storm-showers", "night-alt-storm-showers"],
+				"211": ["day-thunderstorm", "night-alt-thunderstorm"],
+				"212": ["thunderstorm", "thunderstorm"],
+				"221": ["thunderstorm", "thunderstorm"],
+				"230": ["day-storm-showers", "night-alt-storm-showers"],
+				"231": ["day-thunderstorm", "night-alt-thunderstorm"],
+				"232": ["thunderstorm", "thunderstorm"],
+	
+				// "09d": "showers",
+				// "09n": "night-showers",
+				"300": ["showers", "showers"],
+				"301": ["rain-mix", "rain-mix"],
+				"302": ["rain", "rain"],
+				"310": ["showers", "showers"],
+				"311": ["rain-mix", "rain-mix"],
+				"312": ["rain", "rain"],
+				"313": ["showers", "showers"],
+				"314": ["rain-mix", "rain-mix"],
+				"321": ["rain", "rain"],
+	
+				// "10d": "rain",
+				// "10n": "night-rain",
+				"500": ["day-showers", "night-alt-showers"],
+				"501": ["day-rain-mix", "night-alt-rain-mix"],
+				"502": ["day-rain", "night-alt-rain"],
+				"503": ["rain", "rain"],
+				"504": ["rain", "rain"],
+				// "13d": "snow",
+				// "13n": "night-snow",
+				"511": ["day-snow", "night-alt-snow"],
+				// "09d": "showers",
+				// "09n": "night-showers",
+				"520": ["day-showers", "night-alt-showers"],
+				"521": ["day-rain-mix", "night-alt-rain-mix"],
+				"522": ["rain", "rain"],
+				"531": ["rain", "rain"],
+	
+				// "13d": "snow",
+				// "13n": "night-snow",
+				"600": ["day-snow", "night-alt-snow"],
+				"601": ["day-snow", "night-alt-snow"],
+				"602": ["snow", "snow"],
+				"611": ["day-sleet", "night-alt-sleet"],
+				"612": ["day-sleet", "night-alt-sleet"],
+				"613": ["day-sleet", "night-alt-sleet"],
+				"615": ["day-snow", "night-alt-snow"],
+				"616": ["day-snow", "night-alt-snow"],
+				"620": ["day-snow", "night-alt-snow"],
+				"621": ["day-snow", "night-alt-snow"],
+				"622": ["snow", "wi-day-snow"],
+	
+				// "50d": "fog",
+				// "50n": "night-alt-cloudy-windy"
+				"701": ["day-fog", "night-fog"],
+				"711": ["smoke", "smoke"],
+				"721": ["day-haze", "night-fog"],
+				"731": ["sandstorm", "sandstorm"],
+				"741": ["day-fog", "night-fog"], // or neutral "fog"
+				"751": ["sandstorm", "sandstorm"],
+				"761": ["dust", "dust"],
+				"762": ["volcan", "volcan"],
+				"771": ["", ""],
+				"781": ["tornado", "tornado"],
+	
+				// "01d": "day-sunny",
+				// "01n": "night-clear",
+				"800": ["day-sunny", "night-clear"],
+	
+				// "02d": "day-cloudy",
+				// "02n": "night-cloudy",
+				"801": ["day-cloudy-high", "night-cloudy-high"],
+				// "03d": "cloudy",
+				// "03n": "night-cloudy",
+				"802": ["day-cloudy", "night-cloudy"],
+				// "04d": "cloudy-windy",
+				// "04n": "night-cloudy",
+				"803": ["cloud", "cloud"],
+				"804": ["cloudy", "cloudy"],
+			};
+	
+			const idxDay = weatherIcon.match(/n$/) ? 1 : 0;
+			return weatherTypes.hasOwnProperty(weatherId) ? weatherTypes[weatherId][idxDay] : null;
+		},
+	*/
+
 	/* getParams(compliments)
 	 * Generates an url with api parameters based on the config.
 	 *
diff --git a/modules/default/weather/weather.js b/modules/default/weather/weather.js
index 350c4f2d..0a6ae760 100644
--- a/modules/default/weather/weather.js
+++ b/modules/default/weather/weather.js
@@ -23,10 +23,12 @@ Module.register("weather", {
 		showPeriodUpper: false,
 		showWindDirection: true,
 		showWindDirectionAsArrow: false,
+		showUV: false,
 		useBeaufort: true,
 		lang: config.language,
 		showHumidity: false,
 		showSun: true,
+		showAQI: false,
 		degreeLabel: false,
 		decimalSymbol: ".",
 		showIndoorTemperature: false,
@@ -53,6 +55,8 @@ Module.register("weather", {
 	// Can be used by the provider to display location of event if nothing else is specified
 	firstEvent: null,
 
+	nbUpdateWait: 0,
+
 	// Define required scripts.
 	getStyles: function () {
 		return ["font-awesome.css", "weather-icons.css", "weather.css"];
@@ -104,10 +108,10 @@ Module.register("weather", {
 					}
 				}
 			}
-		} else if (notification === "INDOOR_TEMPERATURE") {
+		} else if (notification === "INDOOR_TEMPERATURE" && this.config.showIndoorTemperature) {
 			this.indoorTemperature = this.roundValue(payload);
 			this.updateDom(300);
-		} else if (notification === "INDOOR_HUMIDITY") {
+		} else if (notification === "INDOOR_HUMIDITY" && this.config.showIndoorHumidity) {
 			this.indoorHumidity = this.roundValue(payload);
 			this.updateDom(300);
 		}
@@ -136,6 +140,7 @@ Module.register("weather", {
 		return {
 			config: this.config,
 			current: this.weatherProvider.currentWeather(),
+			currentPollution: (this.config.showAQI && typeof this.weatherProvider.currentPollution === "function") ? this.weatherProvider.currentPollution() : undefined,
 			forecast: forecast,
 			hourly: this.weatherProvider.weatherHourly(),
 			indoor: {
@@ -147,12 +152,15 @@ Module.register("weather", {
 
 	// What to do when the weather provider has new information available?
 	updateAvailable: function () {
-		Log.log("New weather information available.");
-		this.updateDom(0);
-		this.scheduleUpdate();
+		this.nbUpdateWait--;
+		if (this.nbUpdateWait <= 0) {
+			Log.log("New weather information available.");
+			this.updateDom(0);
+			this.scheduleUpdate();
 
-		if (this.weatherProvider.currentWeather()) {
-			this.sendNotification("CURRENTWEATHER_TYPE", { type: this.weatherProvider.currentWeather().weatherType.replace("-", "_") });
+			if (this.weatherProvider.currentWeather()) {
+				this.sendNotification("CURRENTWEATHER_TYPE", { type: this.weatherProvider.currentWeather().weatherType.replace("-", "_") });
+			}
 		}
 	},
 
@@ -165,17 +173,24 @@ Module.register("weather", {
 		setTimeout(() => {
 			switch (this.config.type.toLowerCase()) {
 				case "current":
+					this.nbUpdateWait = 1;
+					if (this.config.showAQI && typeof this.weatherProvider.fetchCurrentPollution === "function") {
+						this.nbUpdateWait++;
+						this.weatherProvider.fetchCurrentPollution();
+					}
 					this.weatherProvider.fetchCurrentWeather();
 					break;
 				case "hourly":
+					this.nbUpdateWait = 1;
 					this.weatherProvider.fetchWeatherHourly();
 					break;
 				case "daily":
 				case "forecast":
+					this.nbUpdateWait = 1;
 					this.weatherProvider.fetchWeatherForecast();
 					break;
 				default:
-					Log.error(`Invalid type ${this.config.type} configured (must be one of 'current', 'hourly', 'daily' or 'forecast')`);
+					Log.error(`Invalid type ${this.config.type} configured (must be one of 'current', 'hourly', 'daily', 'forecast' or 'full')`);
 			}
 		}, nextLoad);
 	},
@@ -236,6 +251,8 @@ Module.register("weather", {
 					}
 				} else if (type === "humidity") {
 					value += "%";
+				} else if (type === "probability") {
+					value += "%";
 				}
 
 				return value;
@@ -289,5 +306,13 @@ Module.register("weather", {
 				}
 			}.bind(this)
 		);
+
+		this.nunjucksEnvironment().addFilter(
+			"probaValue",
+			function (value) {
+				const roundValue = (parseFloat(value) * 100).toFixed(0);
+				return roundValue === "-0" ? 0 : roundValue;
+			}
+		);
 	}
 });
diff --git a/modules/default/weather/weatherprovider.js b/modules/default/weather/weatherprovider.js
index d24623b8..5d582064 100644
--- a/modules/default/weather/weatherprovider.js
+++ b/modules/default/weather/weatherprovider.js
@@ -84,6 +84,16 @@ const WeatherProvider = Class.extend({
 		return this.fetchedLocationName || "";
 	},
 
+	// This returns a Pollution object for the current pollution.
+	currentPollution: function () {
+		return this.currentPollutionObject;
+	},
+
+	// This returns an array of Pollution objects for the Pollution forecast.
+	pollutionForecast: function () {
+		return this.pollutionForecastArray;
+	},
+
 	// Set the currentWeather and notify the delegate that new information is available.
 	setCurrentWeather: function (currentWeatherObject) {
 		// We should check here if we are passing a WeatherDay
@@ -106,6 +116,16 @@ const WeatherProvider = Class.extend({
 		this.fetchedLocationName = name;
 	},
 
+	// Set the currentPollution and notify the delegate that new information is available.
+	setCurrentPollution: function (currentPollutionObject) {
+		this.currentPollutionObject = currentPollutionObject;
+	},
+
+	// Set the pollutionForecastArray and notify the delegate that new information is available.
+	setPollutionForecast: function (pollutionForecastArray) {
+		this.pollutionForecastArray = pollutionForecastArray;
+	},
+
 	// Notify the delegate that new weather is available.
 	updateAvailable: function () {
 		this.delegate.updateAvailable(this);
diff --git a/translations/en.json b/translations/en.json
index 43ba9c74..fdfff745 100644
--- a/translations/en.json
+++ b/translations/en.json
@@ -28,6 +28,12 @@
 	"FEELS": "Feels like {DEGREE}",
 	"PRECIP": "PoP",
 
+	"AQI_1": "Good",
+	"AQI_2": "Fair",
+	"AQI_3": "Moderate",
+	"AQI_4": "Poor",
+	"AQI_5": "Very poor",
+
 	"MODULE_CONFIG_CHANGED": "The configuration options for the {MODULE_NAME} module have changed.\nPlease check the documentation.",
 	"MODULE_CONFIG_ERROR": "Error in the {MODULE_NAME} module. {ERROR}",
 	"MODULE_ERROR_MALFORMED_URL": "Malformed url.",
diff --git a/translations/fr.json b/translations/fr.json
index 97cccc59..dcb149b5 100644
--- a/translations/fr.json
+++ b/translations/fr.json
@@ -27,6 +27,12 @@
 
 	"FEELS": "Ressenti {DEGREE}",
 	"PRECIP": "Probabilité de précipitations",
+	
+	"AQI_1": "Bon",
+	"AQI_2": "Correct",
+	"AQI_3": "Moyen",
+	"AQI_4": "Mauvais",
+	"AQI_5": "Très mauvais",
 
 	"MODULE_CONFIG_CHANGED": "Les options de configuration du module {MODULE_NAME} ont changé. \nVeuillez consulter la documentation.",
 	"MODULE_CONFIG_ERROR": "Erreur dans le module {MODULE_NAME}. {ERROR}",
