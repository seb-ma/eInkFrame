diff --git a/js/module.js b/js/module.js
index 4ef3ab1d..0fb8a1b1 100644
--- a/js/module.js
+++ b/js/module.js
@@ -157,7 +157,8 @@ const Module = Class.extend({
 			return this._nunjucksEnvironment;
 		}
 
-		this._nunjucksEnvironment = new nunjucks.Environment(new nunjucks.WebLoader(this.file(""), { async: true }), {
+		// Use cache to avoid reloading nunjucks file at each rendering
+		this._nunjucksEnvironment = new nunjucks.Environment(new nunjucks.WebLoader(this.file(""), { async: true, useCache: true }), {
 			trimBlocks: true,
 			lstripBlocks: true
 		});
diff --git a/modules/default/calendar/calendar.js b/modules/default/calendar/calendar.js
index 681177d5..06e9a523 100644
--- a/modules/default/calendar/calendar.js
+++ b/modules/default/calendar/calendar.js
@@ -109,7 +109,8 @@ Module.register("calendar", {
 		}
 
 		// Set locale.
-		moment.updateLocale(config.language, CalendarUtils.getLocaleSpecification(config.timeFormat));
+		//moment.updateLocale(config.language, CalendarUtils.getLocaleSpecification(config.timeFormat));
+		moment.locale(config.language);
 
 		// clear data holder before start
 		this.calendarData = {};
diff --git a/modules/default/clock/clock.js b/modules/default/clock/clock.js
index c063d4dc..3339351a 100644
--- a/modules/default/clock/clock.js
+++ b/modules/default/clock/clock.js
@@ -93,6 +93,30 @@ Module.register("clock", {
 		// Set locale.
 		moment.locale(config.language);
 	},
+
+	getMoonIcon: function (phase) {
+		const intPercent = (phase * 100).toFixed();
+		if (intPercent === 0) {
+			return "moon-alt-new";
+		} else if (intPercent < 25) {
+			return "moon-alt-waxing-crescent-" + (1 + Math.floor((intPercent - 0) * 6 / 25));
+		} else if (intPercent === 25) {
+			return "moon-alt-first-quarter";
+		} else if (intPercent < 50) {
+			return "moon-alt-waxing-gibbous-" + (1 + Math.floor((intPercent - 25) * 6 / 25));
+		} else if (intPercent === 50) {
+			return "moon-alt-full";
+		} else if (intPercent < 75) {
+			return "moon-alt-waning-gibbous-" + (1 + Math.floor((intPercent - 50) * 6 / 25));
+		} else if (intPercent === 75) {
+			return "moon-alt-third-quarter";
+		} else if (intPercent < 100) {
+			return "moon-alt-waning-crescent-" + (1 + Math.floor((intPercent - 75) * 6 / 25));
+		} else /* if (intPercent === 100) */ {
+			return "moon-alt-new";
+		}
+	},
+
 	// Override dom generator.
 	getDom: function () {
 		const wrapper = document.createElement("div");
@@ -176,20 +200,27 @@ Module.register("clock", {
 			const sunTimes = SunCalc.getTimes(now, this.config.lat, this.config.lon);
 			const isVisible = now.isBetween(sunTimes.sunrise, sunTimes.sunset);
 			let nextEvent;
+			let sunDelta;
 			if (now.isBefore(sunTimes.sunrise)) {
+				const yesterdaySunTimes = SunCalc.getTimes(now.clone().subtract(1, "day"), this.config.lat, this.config.lon);
+				sunDelta = moment.duration(moment(sunTimes.sunset).diff(sunTimes.sunrise)).subtract(moment(yesterdaySunTimes.sunset).diff(yesterdaySunTimes.sunrise));				
 				nextEvent = sunTimes.sunrise;
 			} else if (now.isBefore(sunTimes.sunset)) {
+				const yesterdaySunTimes = SunCalc.getTimes(now.clone().subtract(1, "day"), this.config.lat, this.config.lon);
+				sunDelta = moment.duration(moment(sunTimes.sunset).diff(sunTimes.sunrise)).subtract(moment(yesterdaySunTimes.sunset).diff(yesterdaySunTimes.sunrise));				
 				nextEvent = sunTimes.sunset;
 			} else {
 				const tomorrowSunTimes = SunCalc.getTimes(now.clone().add(1, "day"), this.config.lat, this.config.lon);
+				sunDelta = moment.duration(moment(tomorrowSunTimes.sunset).diff(tomorrowSunTimes.sunrise)).subtract(moment(sunTimes.sunset).diff(sunTimes.sunrise));
 				nextEvent = tomorrowSunTimes.sunrise;
 			}
 			const untilNextEvent = moment.duration(moment(nextEvent).diff(now));
-			const untilNextEventString = `${untilNextEvent.hours()}h ${untilNextEvent.minutes()}m`;
+			//const untilNextEventString = `${untilNextEvent.hours()}h ${untilNextEvent.minutes()}m`;
+			const untilNextEventString = ((sunDelta.minutes() > 0) ? "+" : "") + sunDelta.minutes() + "m";
 			sunWrapper.innerHTML =
-				`<span class="${isVisible ? "bright" : ""}"><i class="fas fa-sun" aria-hidden="true"></i> ${untilNextEventString}</span>` +
-				`<span><i class="fas fa-arrow-up" aria-hidden="true"></i> ${formatTime(this.config, sunTimes.sunrise)}</span>` +
-				`<span><i class="fas fa-arrow-down" aria-hidden="true"></i> ${formatTime(this.config, sunTimes.sunset)}</span>`;
+				`<span class="${isVisible ? "bright" : ""}"><i class="wi weathericon wi-day-sunny" aria-hidden="true"></i> ${untilNextEventString}</span>` +
+				`<span><i class="wi weathericon wi-sunrise" aria-hidden="true"></i> ${formatTime(this.config, sunTimes.sunrise)}</span>` +
+				`<span><i class="wi weathericon wi-sunset" aria-hidden="true"></i> ${formatTime(this.config, sunTimes.sunset)}</span>`;
 			digitalWrapper.appendChild(sunWrapper);
 		}
 
@@ -209,10 +240,11 @@ Module.register("clock", {
 			}
 			const isVisible = now.isBetween(moonRise, moonSet) || moonTimes.alwaysUp === true;
 			const illuminatedFractionString = `${Math.round(moonIllumination.fraction * 100)}%`;
+			const moonIcon = this.getMoonIcon(moonIllumination.phase);
 			moonWrapper.innerHTML =
-				`<span class="${isVisible ? "bright" : ""}"><i class="fas fa-moon" aria-hidden="true"></i> ${illuminatedFractionString}</span>` +
-				`<span><i class="fas fa-arrow-up" aria-hidden="true"></i> ${moonRise ? formatTime(this.config, moonRise) : "..."}</span>` +
-				`<span><i class="fas fa-arrow-down" aria-hidden="true"></i> ${moonSet ? formatTime(this.config, moonSet) : "..."}</span>`;
+				`<span class="${isVisible ? "bright" : ""}"><i class="wi weathericon wi-${moonIcon}" aria-hidden="true"></i> ${illuminatedFractionString}</span>` +
+				`<span><i class="wi weathericon wi-moonrise" aria-hidden="true"></i> ${moonRise ? formatTime(this.config, moonRise) : "..."}</span>` +
+				`<span><i class="wi weathericon wi-moonset" aria-hidden="true"></i> ${moonSet ? formatTime(this.config, moonSet) : "..."}</span>`;
 			digitalWrapper.appendChild(moonWrapper);
 		}
 
diff --git a/modules/default/weather/current.njk b/modules/default/weather/current.njk
index e2fa2f51..88c33309 100644
--- a/modules/default/weather/current.njk
+++ b/modules/default/weather/current.njk
@@ -1,7 +1,12 @@
 {% if current %}
     {% if not config.onlyTemp %}
         <div class="normal medium">
+            {% if config.windUnits === "beaufort" %}
             <span class="wi wi-strong-wind dimmed"></span>
+            {% else %}
+            <span class="wi wi-wind-beaufort-{{ current.windSpeed | unit("beaufort", config.windUnits) }} dimmed"></span>
+            {% endif %}
+            <span>
             <span>
                 {{ current.windSpeed | unit("wind") | round }}
                 {% if config.showWindDirection %}
@@ -65,6 +70,7 @@
             {% endif %}
             {% if config.showPrecipitationAmount and current.precipitationAmount %}
                 <span class="dimmed">
+                    <span class="fas fa-umbrella"></span>
                     <span class="precipitationLeadText">{{ "PRECIP_AMOUNT" | translate }}</span> {{ current.precipitationAmount | unit("precip", current.precipitationUnits) }}
                 </span>
                 <br />
@@ -76,6 +82,13 @@
             {% endif %}
         </div>
     {% endif %}
+    {% if currentPollution and showAqiAtLevel <= currentPollution.aqi %}
+        <div class="normal medium pollution">
+            <span class="icon fas fa-viruses"></span>
+            {% set aqiLabel = "AQI_" + currentPollution.aqi %}
+            <span>{{ aqiLabel | translate }}</span>
+        </div>
+    {% endif %}
 {% else %}
     <div class="dimmed light small">{{ "LOADING" | translate }}</div>
 {% endif %}
diff --git a/modules/default/weather/providers/openweathermap.js b/modules/default/weather/providers/openweathermap.js
index cf65604b..db17fbf0 100644
--- a/modules/default/weather/providers/openweathermap.js
+++ b/modules/default/weather/providers/openweathermap.js
@@ -23,7 +23,8 @@ WeatherProvider.register("openweathermap", {
 		location: false,
 		lat: 0, // the onecall endpoint needs lat / lon values, it doesn't support the locationId
 		lon: 0,
-		apiKey: ""
+		apiKey: "",
+		expandDaySections: false,
 	},
 
 	// Overwrite the fetchCurrentWeather method.
@@ -88,6 +89,56 @@ WeatherProvider.register("openweathermap", {
 			.finally(() => this.updateAvailable());
 	},
 
+	// Fill all data (current, hourly, forecast) with only 1 call to /onecall API
+	fetchWeatherAll() {
+		if (this.config.weatherEndpoint === "/onecall") {
+			this.fetchData(this.getUrl())
+				.then((data) => {
+					const weatherData = this.generateWeatherObjectsFromOnecall(data);
+					// onecall get all the data - so fill them at once
+					this.setCurrentWeather(weatherData.current);
+					this.setWeatherHourly(weatherData.hours);
+					this.setWeatherForecast(weatherData.days);
+
+					this.setFetchedLocation(`${data.timezone}`);
+				})
+				.catch(function (request) {
+					Log.error("Could not load data ... ", request);
+				})
+				.finally(() => this.updateAvailable());
+		} else {
+			Log.error("Must be called with weatherEndpoint /onecall");
+		}
+	},
+
+	// Retrieve current pollution
+	fetchCurrentPollution() {
+		this.fetchData(this.getUrlPollution(""))
+			.then((data) => {
+				this.setCurrentPollution(this.fetchPollutionApi(data)[0]);
+			})
+			.catch(function (request) {
+				Log.error("Could not load data ... ", request);
+			})
+			.finally(() => {
+				this.updateAvailable();
+			})
+	},
+
+	// Retrieve pollution forecast
+	fetchPollutionForecast() {
+		this.fetchData(this.getUrlPollution("/forecast"))
+			.then((data) => {
+				this.setPollutionForecast(this.fetchPollutionApi(data));
+			})
+			.catch(function (request) {
+				Log.error("Could not load data ... ", request);
+			})
+			.finally(() => {
+				this.updateAvailable();
+			})
+	},
+
 	/**
 	 * Overrides method for setting config to check if endpoint is correct for hourly
 	 * @param {object} config The configuration object
@@ -120,6 +171,13 @@ WeatherProvider.register("openweathermap", {
 		return this.config.apiBase + this.config.apiVersion + this.config.weatherEndpoint + this.getParams();
 	},
 
+	/*
+	 * Gets the complete url for the pollution request
+	 */
+	getUrlPollution(weatherEndpoint) {
+		return this.config.apiBase + this.config.apiVersion + "/air_pollution" + weatherEndpoint + this.getParams();
+	},
+
 	/*
 	 * Generate a WeatherObject based on currentWeatherInformation
 	 */
@@ -130,9 +188,10 @@ WeatherProvider.register("openweathermap", {
 		currentWeather.humidity = currentWeatherData.main.humidity;
 		currentWeather.temperature = currentWeatherData.main.temp;
 		currentWeather.feelsLikeTemp = currentWeatherData.main.feels_like;
+		currentWeather.pressure = currentWeatherData.main.pressure;
 		currentWeather.windSpeed = currentWeatherData.wind.speed;
 		currentWeather.windFromDirection = currentWeatherData.wind.deg;
-		currentWeather.weatherType = this.convertWeatherType(currentWeatherData.weather[0].icon);
+		currentWeather.weatherType = this.convertWeatherType(currentWeatherData.weather[0].icon, currentWeatherData.weather[0].id);
 		currentWeather.sunrise = moment.unix(currentWeatherData.sys.sunrise);
 		currentWeather.sunset = moment.unix(currentWeatherData.sys.sunset);
 
@@ -204,11 +263,11 @@ WeatherProvider.register("openweathermap", {
 				weather.date = moment.unix(forecast.dt);
 
 				// If the first value of today is later than 17:00, we have an icon at least!
-				weather.weatherType = this.convertWeatherType(forecast.weather[0].icon);
+				weather.weatherType = this.convertWeatherType(forecast.weather[0].icon, forecast.weather[0].id);
 			}
 
 			if (moment.unix(forecast.dt).format("H") >= 8 && moment.unix(forecast.dt).format("H") <= 17) {
-				weather.weatherType = this.convertWeatherType(forecast.weather[0].icon);
+				weather.weatherType = this.convertWeatherType(forecast.weather[0].icon, forecast.weather[0].id);
 			}
 
 			// the same day as before
@@ -251,7 +310,7 @@ WeatherProvider.register("openweathermap", {
 			weather.date = moment.unix(forecast.dt);
 			weather.minTemperature = forecast.temp.min;
 			weather.maxTemperature = forecast.temp.max;
-			weather.weatherType = this.convertWeatherType(forecast.weather[0].icon);
+			weather.weatherType = this.convertWeatherType(forecast.weather[0].icon, forecast.weather[0].id);
 			weather.rain = 0;
 			weather.snow = 0;
 
@@ -293,7 +352,9 @@ WeatherProvider.register("openweathermap", {
 			current.sunrise = moment.unix(data.current.sunrise).utcOffset(data.timezone_offset / 60);
 			current.sunset = moment.unix(data.current.sunset).utcOffset(data.timezone_offset / 60);
 			current.temperature = data.current.temp;
-			current.weatherType = this.convertWeatherType(data.current.weather[0].icon);
+			current.weatherType = this.convertWeatherType(data.current.weather[0].icon, data.current.weather[0].id);
+			current.precipitationProbability = data.hourly ? data.hourly[0].pop * 100 : undefined; // Get 1st hour as current precipitation probability
+			current.pressure = data.current.pressure;
 			current.humidity = data.current.humidity;
 			current.uv_index = data.current.uvi;
 			if (data.current.hasOwnProperty("rain") && !isNaN(data.current["rain"]["1h"])) {
@@ -350,6 +411,12 @@ WeatherProvider.register("openweathermap", {
 				weather.date = moment.unix(day.dt).utcOffset(data.timezone_offset / 60);
 				weather.sunrise = moment.unix(day.sunrise).utcOffset(data.timezone_offset / 60);
 				weather.sunset = moment.unix(day.sunset).utcOffset(data.timezone_offset / 60);
+
+				if (!this.config.expandDaySections) {
+					weather.temperature = day.temp.day;
+					weather.feelsLikeTemp = day.feels_like.day;
+				}
+				weather.pressure = day.pressure;
 				weather.minTemperature = day.temp.min;
 				weather.maxTemperature = day.temp.max;
 				weather.humidity = day.humidity;
@@ -372,11 +439,58 @@ WeatherProvider.register("openweathermap", {
 				}
 
 				days.push(weather);
-				weather = new WeatherObject();
+				weather = new WeatherObject(this.config.units, this.config.tempUnits, this.config.windUnits, this.config.useKmh);
+				if (this.config.expandDaySections) {
+					const offset = [6, 12, 18, 0]; // 6 hours between each section
+					const sections_temp = [day.temp.morn, day.temp.day, day.temp.eve, day.temp.night];
+					const sections_feelsLike = [day.feels_like.morn, day.feels_like.day, day.feels_like.eve, day.feels_like.night];
+					for (i = 0; i < offset.length; i++) {
+						weather.date = moment.unix(day.dt).utcOffset(data.timezone_offset / 60).startOf('day').add(offset[i], 'hours');
+						weather.temperature = sections_temp[i];
+						weather.feelsLikeTemp = sections_feelsLike[i];
+
+						// Force precipitationAmount to undefined to distinct this pseudo weather to true data from provider
+						weather.precipitationAmount = undefined;
+		
+						days.push(weather);
+						weather = new WeatherObject(this.config.units, this.config.tempUnits, this.config.windUnits, this.config.useKmh);
+					}
+				}
+			}
+		}
+
+		const alerts = [];
+		if (data.hasOwnProperty("alerts")) {
+			for (const alert of data.alerts) {
+				alertDesc = {};
+				alertDesc.start = moment.unix(alert.start).utcOffset(data.timezone_offset / 60);
+				alertDesc.end = moment.unix(alert.end).utcOffset(data.timezone_offset / 60);
+				alertDesc.event = alert.event;
+				alertDesc.description = alert.description;
+
+				alerts.push(alertDesc);
 			}
 		}
+		return { current: current, hours: hours, days: days, alerts: alerts };
+	},
+
+	/*
+	 * fetch pollutions information
+	 */
+	fetchPollutionApi(pollutions) {
+		// initial variable declaration
+		const results = [];
 
-		return { current: current, hours: hours, days: days };
+		for (const pollution of pollutions.list) {
+			const result = { date: null, aqi: null };
+
+			result.date = moment.unix(pollution.dt);
+			result.aqi = pollution.main.aqi;
+
+			results.push(result);
+		}
+
+		return results;
 	},
 
 	/*
@@ -407,6 +521,98 @@ WeatherProvider.register("openweathermap", {
 		return weatherTypes.hasOwnProperty(weatherType) ? weatherTypes[weatherType] : null;
 	},
 
+	/*	convertWeatherType(weatherIcon, weatherId) {
+			const weatherTypes = {
+				// "11d": "thunderstorm",
+				// "11n": "night-thunderstorm",
+				"200": ["day-storm-showers", "night-alt-storm-showers"],
+				"201": ["day-thunderstorm", "night-alt-thunderstorm"],
+				"202": ["thunderstorm", "thunderstorm"],
+				"210": ["day-storm-showers", "night-alt-storm-showers"],
+				"211": ["day-thunderstorm", "night-alt-thunderstorm"],
+				"212": ["thunderstorm", "thunderstorm"],
+				"221": ["thunderstorm", "thunderstorm"],
+				"230": ["day-storm-showers", "night-alt-storm-showers"],
+				"231": ["day-thunderstorm", "night-alt-thunderstorm"],
+				"232": ["thunderstorm", "thunderstorm"],
+	
+				// "09d": "showers",
+				// "09n": "night-showers",
+				"300": ["showers", "showers"],
+				"301": ["rain-mix", "rain-mix"],
+				"302": ["rain", "rain"],
+				"310": ["showers", "showers"],
+				"311": ["rain-mix", "rain-mix"],
+				"312": ["rain", "rain"],
+				"313": ["showers", "showers"],
+				"314": ["rain-mix", "rain-mix"],
+				"321": ["rain", "rain"],
+	
+				// "10d": "rain",
+				// "10n": "night-rain",
+				"500": ["day-showers", "night-alt-showers"],
+				"501": ["day-rain-mix", "night-alt-rain-mix"],
+				"502": ["day-rain", "night-alt-rain"],
+				"503": ["rain", "rain"],
+				"504": ["rain", "rain"],
+				// "13d": "snow",
+				// "13n": "night-snow",
+				"511": ["day-snow", "night-alt-snow"],
+				// "09d": "showers",
+				// "09n": "night-showers",
+				"520": ["day-showers", "night-alt-showers"],
+				"521": ["day-rain-mix", "night-alt-rain-mix"],
+				"522": ["rain", "rain"],
+				"531": ["rain", "rain"],
+	
+				// "13d": "snow",
+				// "13n": "night-snow",
+				"600": ["day-snow", "night-alt-snow"],
+				"601": ["day-snow", "night-alt-snow"],
+				"602": ["snow", "snow"],
+				"611": ["day-sleet", "night-alt-sleet"],
+				"612": ["day-sleet", "night-alt-sleet"],
+				"613": ["day-sleet", "night-alt-sleet"],
+				"615": ["day-snow", "night-alt-snow"],
+				"616": ["day-snow", "night-alt-snow"],
+				"620": ["day-snow", "night-alt-snow"],
+				"621": ["day-snow", "night-alt-snow"],
+				"622": ["snow", "wi-day-snow"],
+	
+				// "50d": "fog",
+				// "50n": "night-alt-cloudy-windy"
+				"701": ["day-fog", "night-fog"],
+				"711": ["smoke", "smoke"],
+				"721": ["day-haze", "night-fog"],
+				"731": ["sandstorm", "sandstorm"],
+				"741": ["day-fog", "night-fog"], // or neutral "fog"
+				"751": ["sandstorm", "sandstorm"],
+				"761": ["dust", "dust"],
+				"762": ["volcan", "volcan"],
+				"771": ["", ""],
+				"781": ["tornado", "tornado"],
+	
+				// "01d": "day-sunny",
+				// "01n": "night-clear",
+				"800": ["day-sunny", "night-clear"],
+	
+				// "02d": "day-cloudy",
+				// "02n": "night-cloudy",
+				"801": ["day-cloudy-high", "night-cloudy-high"],
+				// "03d": "cloudy",
+				// "03n": "night-cloudy",
+				"802": ["day-cloudy", "night-cloudy"],
+				// "04d": "cloudy-windy",
+				// "04n": "night-cloudy",
+				"803": ["cloud", "cloud"],
+				"804": ["cloudy", "cloudy"],
+			};
+	
+			const idxDay = weatherIcon.match(/n$/) ? 1 : 0;
+			return weatherTypes.hasOwnProperty(weatherId) ? weatherTypes[weatherId][idxDay] : null;
+		},
+	*/
+
 	/* getParams(compliments)
 	 * Generates an url with api parameters based on the config.
 	 *
diff --git a/modules/default/weather/weather.js b/modules/default/weather/weather.js
index 57c91d7b..11456663 100644
--- a/modules/default/weather/weather.js
+++ b/modules/default/weather/weather.js
@@ -32,6 +32,7 @@ Module.register("weather", {
 		showSun: true,
 		showWindDirection: true,
 		showWindDirectionAsArrow: false,
+		showAqiAtLevel: 0,			// Show Air Quality only if AQI is worst or equals to a level (0 to always displaying, undefined to never displaying)
 		degreeLabel: false,
 		decimalSymbol: ".",
 		maxNumberOfDays: 5,
@@ -55,6 +56,8 @@ Module.register("weather", {
 	// Can be used by the provider to display location of event if nothing else is specified
 	firstEvent: null,
 
+	nbUpdateWait: 0,
+
 	// Define required scripts.
 	getStyles: function () {
 		return ["font-awesome.css", "weather-icons.css", "weather.css"];
@@ -114,10 +117,10 @@ Module.register("weather", {
 					}
 				}
 			}
-		} else if (notification === "INDOOR_TEMPERATURE") {
+		} else if (notification === "INDOOR_TEMPERATURE" && this.config.showIndoorTemperature) {
 			this.indoorTemperature = this.roundValue(payload);
 			this.updateDom(300);
-		} else if (notification === "INDOOR_HUMIDITY") {
+		} else if (notification === "INDOOR_HUMIDITY" && this.config.showIndoorHumidity) {
 			this.indoorHumidity = this.roundValue(payload);
 			this.updateDom(300);
 		} else if (notification === "CURRENT_WEATHER_OVERRIDE" && this.config.allowOverrideNotification) {
@@ -152,6 +155,7 @@ Module.register("weather", {
 		return {
 			config: this.config,
 			current: currentData,
+			currentPollution: (this.config.showAQIshowAqiAtLevel && typeof this.weatherProvider.currentPollution === "function") ? this.weatherProvider.currentPollution() : undefined,
 			forecast: forecastData,
 			hourly: hourlyData,
 			indoor: {
@@ -163,22 +167,25 @@ Module.register("weather", {
 
 	// What to do when the weather provider has new information available?
 	updateAvailable: function () {
-		Log.log("New weather information available.");
-		this.updateDom(0);
-		this.scheduleUpdate();
+		this.nbUpdateWait--;
+		if (this.nbUpdateWait <= 0) {
+			Log.log("New weather information available.");
+			this.updateDom(0);
+			this.scheduleUpdate();
 
-		if (this.weatherProvider.currentWeather()) {
-			this.sendNotification("CURRENTWEATHER_TYPE", { type: this.weatherProvider.currentWeather().weatherType.replace("-", "_") });
+			if (this.weatherProvider.currentWeather()) {
+				this.sendNotification("CURRENTWEATHER_TYPE", { type: this.weatherProvider.currentWeather().weatherType.replace("-", "_") });
+			}
+	
+			const notificationPayload = {
+				currentWeather: this.weatherProvider?.currentWeatherObject?.simpleClone() ?? null,
+				forecastArray: this.weatherProvider?.weatherForecastArray?.map((ar) => ar.simpleClone()) ?? [],
+				hourlyArray: this.weatherProvider?.weatherHourlyArray?.map((ar) => ar.simpleClone()) ?? [],
+				locationName: this.weatherProvider?.fetchedLocationName,
+				providerName: this.weatherProvider.providerName
+			};
+			this.sendNotification("WEATHER_UPDATED", notificationPayload);
 		}
-
-		const notificationPayload = {
-			currentWeather: this.weatherProvider?.currentWeatherObject?.simpleClone() ?? null,
-			forecastArray: this.weatherProvider?.weatherForecastArray?.map((ar) => ar.simpleClone()) ?? [],
-			hourlyArray: this.weatherProvider?.weatherHourlyArray?.map((ar) => ar.simpleClone()) ?? [],
-			locationName: this.weatherProvider?.fetchedLocationName,
-			providerName: this.weatherProvider.providerName
-		};
-		this.sendNotification("WEATHER_UPDATED", notificationPayload);
 	},
 
 	scheduleUpdate: function (delay = null) {
@@ -190,17 +197,24 @@ Module.register("weather", {
 		setTimeout(() => {
 			switch (this.config.type.toLowerCase()) {
 				case "current":
+					this.nbUpdateWait = 1;
+					if (this.config.showAqiAtLevel && typeof this.weatherProvider.fetchCurrentPollution === "function") {
+						this.nbUpdateWait++;
+						this.weatherProvider.fetchCurrentPollution();
+					}
 					this.weatherProvider.fetchCurrentWeather();
 					break;
 				case "hourly":
+					this.nbUpdateWait = 1;
 					this.weatherProvider.fetchWeatherHourly();
 					break;
 				case "daily":
 				case "forecast":
+					this.nbUpdateWait = 1;
 					this.weatherProvider.fetchWeatherForecast();
 					break;
 				default:
-					Log.error(`Invalid type ${this.config.type} configured (must be one of 'current', 'hourly', 'daily' or 'forecast')`);
+					Log.error(`Invalid type ${this.config.type} configured (must be one of 'current', 'hourly', 'daily', 'forecast' or 'full')`);
 			}
 		}, nextLoad);
 	},
diff --git a/modules/default/weather/weatherprovider.js b/modules/default/weather/weatherprovider.js
index d3bdb78d..1475b9b9 100644
--- a/modules/default/weather/weatherprovider.js
+++ b/modules/default/weather/weatherprovider.js
@@ -84,6 +84,16 @@ const WeatherProvider = Class.extend({
 		return this.fetchedLocationName || "";
 	},
 
+	// This returns a Pollution object for the current pollution.
+	currentPollution: function () {
+		return this.currentPollutionObject;
+	},
+
+	// This returns an array of Pollution objects for the Pollution forecast.
+	pollutionForecast: function () {
+		return this.pollutionForecastArray;
+	},
+
 	// Set the currentWeather and notify the delegate that new information is available.
 	setCurrentWeather: function (currentWeatherObject) {
 		// We should check here if we are passing a WeatherDay
@@ -106,6 +116,16 @@ const WeatherProvider = Class.extend({
 		this.fetchedLocationName = name;
 	},
 
+	// Set the currentPollution and notify the delegate that new information is available.
+	setCurrentPollution: function (currentPollutionObject) {
+		this.currentPollutionObject = currentPollutionObject;
+	},
+
+	// Set the pollutionForecastArray and notify the delegate that new information is available.
+	setPollutionForecast: function (pollutionForecastArray) {
+		this.pollutionForecastArray = pollutionForecastArray;
+	},
+
 	// Notify the delegate that new weather is available.
 	updateAvailable: function () {
 		this.delegate.updateAvailable(this);
diff --git a/translations/en.json b/translations/en.json
index eb9200c6..2a12dbc6 100644
--- a/translations/en.json
+++ b/translations/en.json
@@ -29,6 +29,12 @@
 	"PRECIP_POP": "PoP",
 	"PRECIP_AMOUNT": "Precipitation amount",
 
+	"AQI_1": "Good",
+	"AQI_2": "Fair",
+	"AQI_3": "Moderate",
+	"AQI_4": "Poor",
+	"AQI_5": "Very poor",
+
 	"MODULE_CONFIG_CHANGED": "The configuration options for the {MODULE_NAME} module have changed.\nPlease check the documentation.",
 	"MODULE_CONFIG_ERROR": "Error in the {MODULE_NAME} module. {ERROR}",
 	"MODULE_ERROR_MALFORMED_URL": "Malformed url.",
diff --git a/translations/fr.json b/translations/fr.json
index 319e0fda..3ee4408f 100644
--- a/translations/fr.json
+++ b/translations/fr.json
@@ -31,6 +31,12 @@
 	"PRECIP_POP": "Probabilité de précipitations",
 	"PRECIP_AMOUNT": "Quantité des précipitations",
 
+	"AQI_1": "Bon",
+	"AQI_2": "Correct",
+	"AQI_3": "Moyen",
+	"AQI_4": "Mauvais",
+	"AQI_5": "Très mauvais",
+
 	"MODULE_CONFIG_CHANGED": "Les options de configuration du module {MODULE_NAME} ont changé.\nVeuillez consulter la documentation.",
 	"MODULE_CONFIG_ERROR": "Erreur dans le module {MODULE_NAME}. {ERROR}",
 	"MODULE_ERROR_MALFORMED_URL": "URL mal formée.",
